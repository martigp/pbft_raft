# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from src.proto import HotStuff_pb2 as src_dot_proto_dot_HotStuff__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in src/proto/HotStuff_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class HotStuffReplicaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Echo = channel.unary_unary(
                '/HotStuff.HotStuffReplica/Echo',
                request_serializer=src_dot_proto_dot_HotStuff__pb2.EchoRequest.SerializeToString,
                response_deserializer=src_dot_proto_dot_HotStuff__pb2.EchoResponse.FromString,
                _registered_method=True)
        self.Beat = channel.unary_unary(
                '/HotStuff.HotStuffReplica/Beat',
                request_serializer=src_dot_proto_dot_HotStuff__pb2.BeatRequest.SerializeToString,
                response_deserializer=src_dot_proto_dot_HotStuff__pb2.BeatResponse.FromString,
                _registered_method=True)


class HotStuffReplicaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Echo(self, request, context):
        """Simple echo service. If the sender is a client,
        the message will also be forwarded to other replicas.
        Not relevant for the protocol, just for testing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Beat(self, request, context):
        """Receive command from the client.
        This is the entry point for the protocol. 
        The name in the paper suggests it is also used
        to send heartbeats. But not sure how that works yet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HotStuffReplicaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Echo': grpc.unary_unary_rpc_method_handler(
                    servicer.Echo,
                    request_deserializer=src_dot_proto_dot_HotStuff__pb2.EchoRequest.FromString,
                    response_serializer=src_dot_proto_dot_HotStuff__pb2.EchoResponse.SerializeToString,
            ),
            'Beat': grpc.unary_unary_rpc_method_handler(
                    servicer.Beat,
                    request_deserializer=src_dot_proto_dot_HotStuff__pb2.BeatRequest.FromString,
                    response_serializer=src_dot_proto_dot_HotStuff__pb2.BeatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'HotStuff.HotStuffReplica', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HotStuffReplica(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/HotStuff.HotStuffReplica/Echo',
            src_dot_proto_dot_HotStuff__pb2.EchoRequest.SerializeToString,
            src_dot_proto_dot_HotStuff__pb2.EchoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Beat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/HotStuff.HotStuffReplica/Beat',
            src_dot_proto_dot_HotStuff__pb2.BeatRequest.SerializeToString,
            src_dot_proto_dot_HotStuff__pb2.BeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
