// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: HotStuffRPC.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_HotStuffRPC_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_HotStuffRPC_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_HotStuffRPC_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_HotStuffRPC_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_HotStuffRPC_2eproto;
namespace HotStuff {
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class QC;
struct QCDefaultTypeInternal;
extern QCDefaultTypeInternal _QC_default_instance_;
class msg;
struct msgDefaultTypeInternal;
extern msgDefaultTypeInternal _msg_default_instance_;
class msg_Data;
struct msg_DataDefaultTypeInternal;
extern msg_DataDefaultTypeInternal _msg_Data_default_instance_;
}  // namespace HotStuff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace HotStuff {
enum Type : int {
  NEW_VIEW = 0,
  PROPOSAL = 1,
  VOTE = 2,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Type_IsValid(int value);
extern const uint32_t Type_internal_data_[];
constexpr Type Type_MIN = static_cast<Type>(0);
constexpr Type Type_MAX = static_cast<Type>(2);
constexpr int Type_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Type_descriptor();
template <typename T>
const std::string& Type_Name(T value) {
  static_assert(std::is_same<T, Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Type_Name(static_cast<Type>(value));
}
template <>
inline const std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Type_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Type_Parse(absl::string_view name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
      Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Node final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:HotStuff.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Node(
      ::google::protobuf::internal::ConstantInitialized);

  inline Node(const Node& from) : Node(nullptr, from) {}
  inline Node(Node&& from) noexcept
      : Node(nullptr, std::move(from)) {}
  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
        &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Node& a, Node& b) { a.Swap(&b); }
  inline void Swap(Node* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Node>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Node& from) { Node::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Node* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "HotStuff.Node"; }

 protected:
  explicit Node(::google::protobuf::Arena* arena);
  Node(::google::protobuf::Arena* arena, const Node& from);
  Node(::google::protobuf::Arena* arena, Node&& from) noexcept
      : Node(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParentFieldNumber = 1,
    kCmdFieldNumber = 2,
    kJustifyFieldNumber = 4,
    kHeightFieldNumber = 3,
  };
  // bytes parent = 1;
  void clear_parent() ;
  const std::string& parent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* value);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // bytes cmd = 2;
  void clear_cmd() ;
  const std::string& cmd() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cmd(Arg_&& arg, Args_... args);
  std::string* mutable_cmd();
  PROTOBUF_NODISCARD std::string* release_cmd();
  void set_allocated_cmd(std::string* value);

  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(
      const std::string& value);
  std::string* _internal_mutable_cmd();

  public:
  // .HotStuff.QC justify = 4;
  bool has_justify() const;
  void clear_justify() ;
  const ::HotStuff::QC& justify() const;
  PROTOBUF_NODISCARD ::HotStuff::QC* release_justify();
  ::HotStuff::QC* mutable_justify();
  void set_allocated_justify(::HotStuff::QC* value);
  void unsafe_arena_set_allocated_justify(::HotStuff::QC* value);
  ::HotStuff::QC* unsafe_arena_release_justify();

  private:
  const ::HotStuff::QC& _internal_justify() const;
  ::HotStuff::QC* _internal_mutable_justify();

  public:
  // uint64 height = 3;
  void clear_height() ;
  ::uint64_t height() const;
  void set_height(::uint64_t value);

  private:
  ::uint64_t _internal_height() const;
  void _internal_set_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:HotStuff.Node)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Node_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Node& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr parent_;
    ::google::protobuf::internal::ArenaStringPtr cmd_;
    ::HotStuff::QC* justify_;
    ::uint64_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HotStuffRPC_2eproto;
};
// -------------------------------------------------------------------

class QC final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:HotStuff.QC) */ {
 public:
  inline QC() : QC(nullptr) {}
  ~QC() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QC(
      ::google::protobuf::internal::ConstantInitialized);

  inline QC(const QC& from) : QC(nullptr, from) {}
  inline QC(QC&& from) noexcept
      : QC(nullptr, std::move(from)) {}
  inline QC& operator=(const QC& from) {
    CopyFrom(from);
    return *this;
  }
  inline QC& operator=(QC&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QC& default_instance() {
    return *internal_default_instance();
  }
  static inline const QC* internal_default_instance() {
    return reinterpret_cast<const QC*>(
        &_QC_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(QC& a, QC& b) { a.Swap(&b); }
  inline void Swap(QC* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QC* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QC* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<QC>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QC& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QC& from) { QC::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QC* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "HotStuff.QC"; }

 protected:
  explicit QC(::google::protobuf::Arena* arena);
  QC(::google::protobuf::Arena* arena, const QC& from);
  QC(::google::protobuf::Arena* arena, QC&& from) noexcept
      : QC(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSigFieldNumber = 4,
    kNodeFieldNumber = 3,
    kViewNumberFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes sig = 4;
  void clear_sig() ;
  const std::string& sig() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sig(Arg_&& arg, Args_... args);
  std::string* mutable_sig();
  PROTOBUF_NODISCARD std::string* release_sig();
  void set_allocated_sig(std::string* value);

  private:
  const std::string& _internal_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sig(
      const std::string& value);
  std::string* _internal_mutable_sig();

  public:
  // .HotStuff.Node node = 3;
  bool has_node() const;
  void clear_node() ;
  const ::HotStuff::Node& node() const;
  PROTOBUF_NODISCARD ::HotStuff::Node* release_node();
  ::HotStuff::Node* mutable_node();
  void set_allocated_node(::HotStuff::Node* value);
  void unsafe_arena_set_allocated_node(::HotStuff::Node* value);
  ::HotStuff::Node* unsafe_arena_release_node();

  private:
  const ::HotStuff::Node& _internal_node() const;
  ::HotStuff::Node* _internal_mutable_node();

  public:
  // uint64 viewNumber = 2;
  void clear_viewnumber() ;
  ::uint64_t viewnumber() const;
  void set_viewnumber(::uint64_t value);

  private:
  ::uint64_t _internal_viewnumber() const;
  void _internal_set_viewnumber(::uint64_t value);

  public:
  // .HotStuff.Type type = 1;
  void clear_type() ;
  ::HotStuff::Type type() const;
  void set_type(::HotStuff::Type value);

  private:
  ::HotStuff::Type _internal_type() const;
  void _internal_set_type(::HotStuff::Type value);

  public:
  // @@protoc_insertion_point(class_scope:HotStuff.QC)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_QC_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QC& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr sig_;
    ::HotStuff::Node* node_;
    ::uint64_t viewnumber_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HotStuffRPC_2eproto;
};
// -------------------------------------------------------------------

class msg_Data final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:HotStuff.msg.Data) */ {
 public:
  inline msg_Data() : msg_Data(nullptr) {}
  ~msg_Data() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR msg_Data(
      ::google::protobuf::internal::ConstantInitialized);

  inline msg_Data(const msg_Data& from) : msg_Data(nullptr, from) {}
  inline msg_Data(msg_Data&& from) noexcept
      : msg_Data(nullptr, std::move(from)) {}
  inline msg_Data& operator=(const msg_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_Data& operator=(msg_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const msg_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const msg_Data* internal_default_instance() {
    return reinterpret_cast<const msg_Data*>(
        &_msg_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(msg_Data& a, msg_Data& b) { a.Swap(&b); }
  inline void Swap(msg_Data* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(msg_Data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  msg_Data* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<msg_Data>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const msg_Data& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const msg_Data& from) { msg_Data::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(msg_Data* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "HotStuff.msg.Data"; }

 protected:
  explicit msg_Data(::google::protobuf::Arena* arena);
  msg_Data(::google::protobuf::Arena* arena, const msg_Data& from);
  msg_Data(::google::protobuf::Arena* arena, msg_Data&& from) noexcept
      : msg_Data(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeFieldNumber = 3,
    kViewNumberFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .HotStuff.Node node = 3;
  bool has_node() const;
  void clear_node() ;
  const ::HotStuff::Node& node() const;
  PROTOBUF_NODISCARD ::HotStuff::Node* release_node();
  ::HotStuff::Node* mutable_node();
  void set_allocated_node(::HotStuff::Node* value);
  void unsafe_arena_set_allocated_node(::HotStuff::Node* value);
  ::HotStuff::Node* unsafe_arena_release_node();

  private:
  const ::HotStuff::Node& _internal_node() const;
  ::HotStuff::Node* _internal_mutable_node();

  public:
  // uint64 viewNumber = 2;
  void clear_viewnumber() ;
  ::uint64_t viewnumber() const;
  void set_viewnumber(::uint64_t value);

  private:
  ::uint64_t _internal_viewnumber() const;
  void _internal_set_viewnumber(::uint64_t value);

  public:
  // .HotStuff.Type type = 1;
  void clear_type() ;
  ::HotStuff::Type type() const;
  void set_type(::HotStuff::Type value);

  private:
  ::HotStuff::Type _internal_type() const;
  void _internal_set_type(::HotStuff::Type value);

  public:
  // @@protoc_insertion_point(class_scope:HotStuff.msg.Data)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_msg_Data_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const msg_Data& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::HotStuff::Node* node_;
    ::uint64_t viewnumber_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HotStuffRPC_2eproto;
};
// -------------------------------------------------------------------

class msg final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:HotStuff.msg) */ {
 public:
  inline msg() : msg(nullptr) {}
  ~msg() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR msg(
      ::google::protobuf::internal::ConstantInitialized);

  inline msg(const msg& from) : msg(nullptr, from) {}
  inline msg(msg&& from) noexcept
      : msg(nullptr, std::move(from)) {}
  inline msg& operator=(const msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg& operator=(msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const msg* internal_default_instance() {
    return reinterpret_cast<const msg*>(
        &_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(msg& a, msg& b) { a.Swap(&b); }
  inline void Swap(msg* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(msg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  msg* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<msg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const msg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const msg& from) { msg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(msg* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "HotStuff.msg"; }

 protected:
  explicit msg(::google::protobuf::Arena* arena);
  msg(::google::protobuf::Arena* arena, const msg& from);
  msg(::google::protobuf::Arena* arena, msg&& from) noexcept
      : msg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Data = msg_Data;

  // accessors -------------------------------------------------------
  enum : int {
    kSenderIdFieldNumber = 1,
    kPartialSigFieldNumber = 4,
    kDataFieldNumber = 2,
    kJustifyFieldNumber = 3,
  };
  // bytes senderId = 1;
  void clear_senderid() ;
  const std::string& senderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_senderid(Arg_&& arg, Args_... args);
  std::string* mutable_senderid();
  PROTOBUF_NODISCARD std::string* release_senderid();
  void set_allocated_senderid(std::string* value);

  private:
  const std::string& _internal_senderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_senderid(
      const std::string& value);
  std::string* _internal_mutable_senderid();

  public:
  // optional bytes partialSig = 4;
  bool has_partialsig() const;
  void clear_partialsig() ;
  const std::string& partialsig() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_partialsig(Arg_&& arg, Args_... args);
  std::string* mutable_partialsig();
  PROTOBUF_NODISCARD std::string* release_partialsig();
  void set_allocated_partialsig(std::string* value);

  private:
  const std::string& _internal_partialsig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partialsig(
      const std::string& value);
  std::string* _internal_mutable_partialsig();

  public:
  // .HotStuff.msg.Data data = 2;
  bool has_data() const;
  void clear_data() ;
  const ::HotStuff::msg_Data& data() const;
  PROTOBUF_NODISCARD ::HotStuff::msg_Data* release_data();
  ::HotStuff::msg_Data* mutable_data();
  void set_allocated_data(::HotStuff::msg_Data* value);
  void unsafe_arena_set_allocated_data(::HotStuff::msg_Data* value);
  ::HotStuff::msg_Data* unsafe_arena_release_data();

  private:
  const ::HotStuff::msg_Data& _internal_data() const;
  ::HotStuff::msg_Data* _internal_mutable_data();

  public:
  // optional .HotStuff.QC justify = 3;
  bool has_justify() const;
  void clear_justify() ;
  const ::HotStuff::QC& justify() const;
  PROTOBUF_NODISCARD ::HotStuff::QC* release_justify();
  ::HotStuff::QC* mutable_justify();
  void set_allocated_justify(::HotStuff::QC* value);
  void unsafe_arena_set_allocated_justify(::HotStuff::QC* value);
  ::HotStuff::QC* unsafe_arena_release_justify();

  private:
  const ::HotStuff::QC& _internal_justify() const;
  ::HotStuff::QC* _internal_mutable_justify();

  public:
  // @@protoc_insertion_point(class_scope:HotStuff.msg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_msg_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const msg& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr senderid_;
    ::google::protobuf::internal::ArenaStringPtr partialsig_;
    ::HotStuff::msg_Data* data_;
    ::HotStuff::QC* justify_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HotStuffRPC_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Node

// bytes parent = 1;
inline void Node::clear_parent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& Node::parent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HotStuff.Node.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Node::set_parent(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HotStuff.Node.parent)
}
inline std::string* Node::mutable_parent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:HotStuff.Node.parent)
  return _s;
}
inline const std::string& Node::_internal_parent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parent_.Get();
}
inline void Node::_internal_set_parent(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.Set(value, GetArena());
}
inline std::string* Node::_internal_mutable_parent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parent_.Mutable( GetArena());
}
inline std::string* Node::release_parent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HotStuff.Node.parent)
  return _impl_.parent_.Release();
}
inline void Node::set_allocated_parent(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HotStuff.Node.parent)
}

// bytes cmd = 2;
inline void Node::clear_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cmd_.ClearToEmpty();
}
inline const std::string& Node::cmd() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HotStuff.Node.cmd)
  return _internal_cmd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Node::set_cmd(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cmd_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HotStuff.Node.cmd)
}
inline std::string* Node::mutable_cmd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:HotStuff.Node.cmd)
  return _s;
}
inline const std::string& Node::_internal_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cmd_.Get();
}
inline void Node::_internal_set_cmd(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cmd_.Set(value, GetArena());
}
inline std::string* Node::_internal_mutable_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cmd_.Mutable( GetArena());
}
inline std::string* Node::release_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HotStuff.Node.cmd)
  return _impl_.cmd_.Release();
}
inline void Node::set_allocated_cmd(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cmd_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cmd_.IsDefault()) {
          _impl_.cmd_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HotStuff.Node.cmd)
}

// uint64 height = 3;
inline void Node::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::uint64_t{0u};
}
inline ::uint64_t Node::height() const {
  // @@protoc_insertion_point(field_get:HotStuff.Node.height)
  return _internal_height();
}
inline void Node::set_height(::uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:HotStuff.Node.height)
}
inline ::uint64_t Node::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void Node::_internal_set_height(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// .HotStuff.QC justify = 4;
inline bool Node::has_justify() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.justify_ != nullptr);
  return value;
}
inline void Node::clear_justify() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.justify_ != nullptr) _impl_.justify_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HotStuff::QC& Node::_internal_justify() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::HotStuff::QC* p = _impl_.justify_;
  return p != nullptr ? *p : reinterpret_cast<const ::HotStuff::QC&>(::HotStuff::_QC_default_instance_);
}
inline const ::HotStuff::QC& Node::justify() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HotStuff.Node.justify)
  return _internal_justify();
}
inline void Node::unsafe_arena_set_allocated_justify(::HotStuff::QC* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.justify_);
  }
  _impl_.justify_ = reinterpret_cast<::HotStuff::QC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HotStuff.Node.justify)
}
inline ::HotStuff::QC* Node::release_justify() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HotStuff::QC* released = _impl_.justify_;
  _impl_.justify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::HotStuff::QC* Node::unsafe_arena_release_justify() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HotStuff.Node.justify)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HotStuff::QC* temp = _impl_.justify_;
  _impl_.justify_ = nullptr;
  return temp;
}
inline ::HotStuff::QC* Node::_internal_mutable_justify() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.justify_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::HotStuff::QC>(GetArena());
    _impl_.justify_ = reinterpret_cast<::HotStuff::QC*>(p);
  }
  return _impl_.justify_;
}
inline ::HotStuff::QC* Node::mutable_justify() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::HotStuff::QC* _msg = _internal_mutable_justify();
  // @@protoc_insertion_point(field_mutable:HotStuff.Node.justify)
  return _msg;
}
inline void Node::set_allocated_justify(::HotStuff::QC* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.justify_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.justify_ = reinterpret_cast<::HotStuff::QC*>(value);
  // @@protoc_insertion_point(field_set_allocated:HotStuff.Node.justify)
}

// -------------------------------------------------------------------

// QC

// .HotStuff.Type type = 1;
inline void QC::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::HotStuff::Type QC::type() const {
  // @@protoc_insertion_point(field_get:HotStuff.QC.type)
  return _internal_type();
}
inline void QC::set_type(::HotStuff::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:HotStuff.QC.type)
}
inline ::HotStuff::Type QC::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::HotStuff::Type>(_impl_.type_);
}
inline void QC::_internal_set_type(::HotStuff::Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// uint64 viewNumber = 2;
inline void QC::clear_viewnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.viewnumber_ = ::uint64_t{0u};
}
inline ::uint64_t QC::viewnumber() const {
  // @@protoc_insertion_point(field_get:HotStuff.QC.viewNumber)
  return _internal_viewnumber();
}
inline void QC::set_viewnumber(::uint64_t value) {
  _internal_set_viewnumber(value);
  // @@protoc_insertion_point(field_set:HotStuff.QC.viewNumber)
}
inline ::uint64_t QC::_internal_viewnumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.viewnumber_;
}
inline void QC::_internal_set_viewnumber(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.viewnumber_ = value;
}

// .HotStuff.Node node = 3;
inline bool QC::has_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.node_ != nullptr);
  return value;
}
inline void QC::clear_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_ != nullptr) _impl_.node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HotStuff::Node& QC::_internal_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::HotStuff::Node* p = _impl_.node_;
  return p != nullptr ? *p : reinterpret_cast<const ::HotStuff::Node&>(::HotStuff::_Node_default_instance_);
}
inline const ::HotStuff::Node& QC::node() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HotStuff.QC.node)
  return _internal_node();
}
inline void QC::unsafe_arena_set_allocated_node(::HotStuff::Node* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.node_);
  }
  _impl_.node_ = reinterpret_cast<::HotStuff::Node*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HotStuff.QC.node)
}
inline ::HotStuff::Node* QC::release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HotStuff::Node* released = _impl_.node_;
  _impl_.node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::HotStuff::Node* QC::unsafe_arena_release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HotStuff.QC.node)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HotStuff::Node* temp = _impl_.node_;
  _impl_.node_ = nullptr;
  return temp;
}
inline ::HotStuff::Node* QC::_internal_mutable_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::HotStuff::Node>(GetArena());
    _impl_.node_ = reinterpret_cast<::HotStuff::Node*>(p);
  }
  return _impl_.node_;
}
inline ::HotStuff::Node* QC::mutable_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::HotStuff::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:HotStuff.QC.node)
  return _msg;
}
inline void QC::set_allocated_node(::HotStuff::Node* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.node_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.node_ = reinterpret_cast<::HotStuff::Node*>(value);
  // @@protoc_insertion_point(field_set_allocated:HotStuff.QC.node)
}

// bytes sig = 4;
inline void QC::clear_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sig_.ClearToEmpty();
}
inline const std::string& QC::sig() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HotStuff.QC.sig)
  return _internal_sig();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QC::set_sig(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sig_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HotStuff.QC.sig)
}
inline std::string* QC::mutable_sig() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sig();
  // @@protoc_insertion_point(field_mutable:HotStuff.QC.sig)
  return _s;
}
inline const std::string& QC::_internal_sig() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sig_.Get();
}
inline void QC::_internal_set_sig(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sig_.Set(value, GetArena());
}
inline std::string* QC::_internal_mutable_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sig_.Mutable( GetArena());
}
inline std::string* QC::release_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HotStuff.QC.sig)
  return _impl_.sig_.Release();
}
inline void QC::set_allocated_sig(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sig_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sig_.IsDefault()) {
          _impl_.sig_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HotStuff.QC.sig)
}

// -------------------------------------------------------------------

// msg_Data

// .HotStuff.Type type = 1;
inline void msg_Data::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::HotStuff::Type msg_Data::type() const {
  // @@protoc_insertion_point(field_get:HotStuff.msg.Data.type)
  return _internal_type();
}
inline void msg_Data::set_type(::HotStuff::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:HotStuff.msg.Data.type)
}
inline ::HotStuff::Type msg_Data::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::HotStuff::Type>(_impl_.type_);
}
inline void msg_Data::_internal_set_type(::HotStuff::Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// uint64 viewNumber = 2;
inline void msg_Data::clear_viewnumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.viewnumber_ = ::uint64_t{0u};
}
inline ::uint64_t msg_Data::viewnumber() const {
  // @@protoc_insertion_point(field_get:HotStuff.msg.Data.viewNumber)
  return _internal_viewnumber();
}
inline void msg_Data::set_viewnumber(::uint64_t value) {
  _internal_set_viewnumber(value);
  // @@protoc_insertion_point(field_set:HotStuff.msg.Data.viewNumber)
}
inline ::uint64_t msg_Data::_internal_viewnumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.viewnumber_;
}
inline void msg_Data::_internal_set_viewnumber(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.viewnumber_ = value;
}

// optional .HotStuff.Node node = 3;
inline bool msg_Data::has_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.node_ != nullptr);
  return value;
}
inline void msg_Data::clear_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_ != nullptr) _impl_.node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HotStuff::Node& msg_Data::_internal_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::HotStuff::Node* p = _impl_.node_;
  return p != nullptr ? *p : reinterpret_cast<const ::HotStuff::Node&>(::HotStuff::_Node_default_instance_);
}
inline const ::HotStuff::Node& msg_Data::node() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HotStuff.msg.Data.node)
  return _internal_node();
}
inline void msg_Data::unsafe_arena_set_allocated_node(::HotStuff::Node* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.node_);
  }
  _impl_.node_ = reinterpret_cast<::HotStuff::Node*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HotStuff.msg.Data.node)
}
inline ::HotStuff::Node* msg_Data::release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HotStuff::Node* released = _impl_.node_;
  _impl_.node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::HotStuff::Node* msg_Data::unsafe_arena_release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HotStuff.msg.Data.node)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HotStuff::Node* temp = _impl_.node_;
  _impl_.node_ = nullptr;
  return temp;
}
inline ::HotStuff::Node* msg_Data::_internal_mutable_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::HotStuff::Node>(GetArena());
    _impl_.node_ = reinterpret_cast<::HotStuff::Node*>(p);
  }
  return _impl_.node_;
}
inline ::HotStuff::Node* msg_Data::mutable_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::HotStuff::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:HotStuff.msg.Data.node)
  return _msg;
}
inline void msg_Data::set_allocated_node(::HotStuff::Node* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.node_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.node_ = reinterpret_cast<::HotStuff::Node*>(value);
  // @@protoc_insertion_point(field_set_allocated:HotStuff.msg.Data.node)
}

// -------------------------------------------------------------------

// msg

// bytes senderId = 1;
inline void msg::clear_senderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senderid_.ClearToEmpty();
}
inline const std::string& msg::senderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HotStuff.msg.senderId)
  return _internal_senderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void msg::set_senderid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senderid_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HotStuff.msg.senderId)
}
inline std::string* msg::mutable_senderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_senderid();
  // @@protoc_insertion_point(field_mutable:HotStuff.msg.senderId)
  return _s;
}
inline const std::string& msg::_internal_senderid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.senderid_.Get();
}
inline void msg::_internal_set_senderid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senderid_.Set(value, GetArena());
}
inline std::string* msg::_internal_mutable_senderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.senderid_.Mutable( GetArena());
}
inline std::string* msg::release_senderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HotStuff.msg.senderId)
  return _impl_.senderid_.Release();
}
inline void msg::set_allocated_senderid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senderid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.senderid_.IsDefault()) {
          _impl_.senderid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HotStuff.msg.senderId)
}

// .HotStuff.msg.Data data = 2;
inline bool msg::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void msg::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HotStuff::msg_Data& msg::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::HotStuff::msg_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::HotStuff::msg_Data&>(::HotStuff::_msg_Data_default_instance_);
}
inline const ::HotStuff::msg_Data& msg::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HotStuff.msg.data)
  return _internal_data();
}
inline void msg::unsafe_arena_set_allocated_data(::HotStuff::msg_Data* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::HotStuff::msg_Data*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HotStuff.msg.data)
}
inline ::HotStuff::msg_Data* msg::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HotStuff::msg_Data* released = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::HotStuff::msg_Data* msg::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HotStuff.msg.data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HotStuff::msg_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::HotStuff::msg_Data* msg::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::HotStuff::msg_Data>(GetArena());
    _impl_.data_ = reinterpret_cast<::HotStuff::msg_Data*>(p);
  }
  return _impl_.data_;
}
inline ::HotStuff::msg_Data* msg::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::HotStuff::msg_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:HotStuff.msg.data)
  return _msg;
}
inline void msg::set_allocated_data(::HotStuff::msg_Data* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.data_ = reinterpret_cast<::HotStuff::msg_Data*>(value);
  // @@protoc_insertion_point(field_set_allocated:HotStuff.msg.data)
}

// optional .HotStuff.QC justify = 3;
inline bool msg::has_justify() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.justify_ != nullptr);
  return value;
}
inline void msg::clear_justify() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.justify_ != nullptr) _impl_.justify_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HotStuff::QC& msg::_internal_justify() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::HotStuff::QC* p = _impl_.justify_;
  return p != nullptr ? *p : reinterpret_cast<const ::HotStuff::QC&>(::HotStuff::_QC_default_instance_);
}
inline const ::HotStuff::QC& msg::justify() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HotStuff.msg.justify)
  return _internal_justify();
}
inline void msg::unsafe_arena_set_allocated_justify(::HotStuff::QC* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.justify_);
  }
  _impl_.justify_ = reinterpret_cast<::HotStuff::QC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HotStuff.msg.justify)
}
inline ::HotStuff::QC* msg::release_justify() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HotStuff::QC* released = _impl_.justify_;
  _impl_.justify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::HotStuff::QC* msg::unsafe_arena_release_justify() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HotStuff.msg.justify)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HotStuff::QC* temp = _impl_.justify_;
  _impl_.justify_ = nullptr;
  return temp;
}
inline ::HotStuff::QC* msg::_internal_mutable_justify() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.justify_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::HotStuff::QC>(GetArena());
    _impl_.justify_ = reinterpret_cast<::HotStuff::QC*>(p);
  }
  return _impl_.justify_;
}
inline ::HotStuff::QC* msg::mutable_justify() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::HotStuff::QC* _msg = _internal_mutable_justify();
  // @@protoc_insertion_point(field_mutable:HotStuff.msg.justify)
  return _msg;
}
inline void msg::set_allocated_justify(::HotStuff::QC* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.justify_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.justify_ = reinterpret_cast<::HotStuff::QC*>(value);
  // @@protoc_insertion_point(field_set_allocated:HotStuff.msg.justify)
}

// optional bytes partialSig = 4;
inline bool msg::has_partialsig() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void msg::clear_partialsig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.partialsig_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& msg::partialsig() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HotStuff.msg.partialSig)
  return _internal_partialsig();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void msg::set_partialsig(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.partialsig_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HotStuff.msg.partialSig)
}
inline std::string* msg::mutable_partialsig() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_partialsig();
  // @@protoc_insertion_point(field_mutable:HotStuff.msg.partialSig)
  return _s;
}
inline const std::string& msg::_internal_partialsig() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.partialsig_.Get();
}
inline void msg::_internal_set_partialsig(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.partialsig_.Set(value, GetArena());
}
inline std::string* msg::_internal_mutable_partialsig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.partialsig_.Mutable( GetArena());
}
inline std::string* msg::release_partialsig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HotStuff.msg.partialSig)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.partialsig_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partialsig_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void msg::set_allocated_partialsig(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.partialsig_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.partialsig_.IsDefault()) {
          _impl_.partialsig_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HotStuff.msg.partialSig)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace HotStuff


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::HotStuff::Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::HotStuff::Type>() {
  return ::HotStuff::Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_HotStuffRPC_2eproto_2epb_2eh
