// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftrpc.proto
// Protobuf C++ Version: 4.26.0-dev

#include "raftrpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace RaftCommon {

inline constexpr RequestVoteResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : term_{::uint64_t{0u}},
        votegranted_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RequestVoteResponse::RequestVoteResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RequestVoteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestVoteResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestVoteResponseDefaultTypeInternal() {}
  union {
    RequestVoteResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;

inline constexpr RequestVoteRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : term_{::uint64_t{0u}},
        candidateid_{::uint64_t{0u}},
        lastlogindex_{::uint64_t{0u}},
        lastlogterm_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RequestVoteRequest::RequestVoteRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RequestVoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestVoteRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestVoteRequestDefaultTypeInternal() {}
  union {
    RequestVoteRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;

inline constexpr LogEntryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ret_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LogEntryResponse::LogEntryResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogEntryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEntryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEntryResponseDefaultTypeInternal() {}
  union {
    LogEntryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEntryResponseDefaultTypeInternal _LogEntryResponse_default_instance_;

inline constexpr LogEntryRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : cmd_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LogEntryRequest::LogEntryRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogEntryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEntryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEntryRequestDefaultTypeInternal() {}
  union {
    LogEntryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEntryRequestDefaultTypeInternal _LogEntryRequest_default_instance_;

inline constexpr LogEntry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : cmd_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        term_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LogEntry::LogEntry(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEntryDefaultTypeInternal() {}
  union {
    LogEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEntryDefaultTypeInternal _LogEntry_default_instance_;

inline constexpr AppendEntriesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : term_{::uint64_t{0u}},
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AppendEntriesResponse::AppendEntriesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AppendEntriesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesResponseDefaultTypeInternal() {}
  union {
    AppendEntriesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;

inline constexpr AppendEntriesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entries_{},
        term_{::uint64_t{0u}},
        leaderid_{::uint64_t{0u}},
        prevlogindex_{::uint64_t{0u}},
        prevlogterm_{::uint64_t{0u}},
        leadercommit_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AppendEntriesRequest::AppendEntriesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AppendEntriesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesRequestDefaultTypeInternal() {}
  union {
    AppendEntriesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;

inline constexpr RaftRPC::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR RaftRPC::RaftRPC(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RaftRPCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftRPCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftRPCDefaultTypeInternal() {}
  union {
    RaftRPC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftRPCDefaultTypeInternal _RaftRPC_default_instance_;
}  // namespace RaftCommon
static ::_pb::Metadata file_level_metadata_raftrpc_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_raftrpc_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_raftrpc_2eproto = nullptr;
const ::uint32_t
    TableStruct_raftrpc_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RaftCommon::LogEntryRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RaftCommon::LogEntryRequest, _impl_.cmd_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RaftCommon::LogEntryResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RaftCommon::LogEntryResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::LogEntryResponse, _impl_.ret_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RaftCommon::LogEntry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RaftCommon::LogEntry, _impl_.cmd_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::LogEntry, _impl_.term_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RaftCommon::AppendEntriesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RaftCommon::AppendEntriesRequest, _impl_.term_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::AppendEntriesRequest, _impl_.leaderid_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::AppendEntriesRequest, _impl_.prevlogindex_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::AppendEntriesRequest, _impl_.prevlogterm_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::AppendEntriesRequest, _impl_.entries_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::AppendEntriesRequest, _impl_.leadercommit_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RaftCommon::AppendEntriesResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RaftCommon::AppendEntriesResponse, _impl_.term_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::AppendEntriesResponse, _impl_.success_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RaftCommon::RequestVoteRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RaftCommon::RequestVoteRequest, _impl_.term_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::RequestVoteRequest, _impl_.candidateid_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::RequestVoteRequest, _impl_.lastlogindex_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::RequestVoteRequest, _impl_.lastlogterm_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RaftCommon::RequestVoteResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RaftCommon::RequestVoteResponse, _impl_.term_),
        PROTOBUF_FIELD_OFFSET(::RaftCommon::RequestVoteResponse, _impl_.votegranted_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RaftCommon::RaftRPC, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::RaftCommon::RaftRPC, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::RaftCommon::RaftRPC, _impl_.payload_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::RaftCommon::LogEntryRequest)},
        {9, -1, -1, sizeof(::RaftCommon::LogEntryResponse)},
        {19, -1, -1, sizeof(::RaftCommon::LogEntry)},
        {29, -1, -1, sizeof(::RaftCommon::AppendEntriesRequest)},
        {43, -1, -1, sizeof(::RaftCommon::AppendEntriesResponse)},
        {53, -1, -1, sizeof(::RaftCommon::RequestVoteRequest)},
        {65, -1, -1, sizeof(::RaftCommon::RequestVoteResponse)},
        {75, -1, -1, sizeof(::RaftCommon::RaftRPC)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::RaftCommon::_LogEntryRequest_default_instance_._instance,
    &::RaftCommon::_LogEntryResponse_default_instance_._instance,
    &::RaftCommon::_LogEntry_default_instance_._instance,
    &::RaftCommon::_AppendEntriesRequest_default_instance_._instance,
    &::RaftCommon::_AppendEntriesResponse_default_instance_._instance,
    &::RaftCommon::_RequestVoteRequest_default_instance_._instance,
    &::RaftCommon::_RequestVoteResponse_default_instance_._instance,
    &::RaftCommon::_RaftRPC_default_instance_._instance,
};
const char descriptor_table_protodef_raftrpc_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rraftrpc.proto\022\nRaftCommon\"\036\n\017LogEntryR"
    "equest\022\013\n\003cmd\030\001 \001(\014\"0\n\020LogEntryResponse\022"
    "\017\n\007success\030\001 \001(\010\022\013\n\003ret\030\002 \001(\014\"%\n\010LogEntr"
    "y\022\013\n\003cmd\030\001 \001(\014\022\014\n\004term\030\002 \001(\004\"\236\001\n\024AppendE"
    "ntriesRequest\022\014\n\004term\030\001 \001(\004\022\020\n\010leaderId\030"
    "\002 \001(\004\022\024\n\014prevLogIndex\030\003 \001(\004\022\023\n\013prevLogTe"
    "rm\030\004 \001(\004\022%\n\007entries\030\005 \003(\0132\024.RaftCommon.L"
    "ogEntry\022\024\n\014leaderCommit\030\006 \001(\004\"6\n\025AppendE"
    "ntriesResponse\022\014\n\004term\030\001 \001(\004\022\017\n\007success\030"
    "\002 \001(\010\"b\n\022RequestVoteRequest\022\014\n\004term\030\001 \001("
    "\004\022\023\n\013candidateId\030\002 \001(\004\022\024\n\014lastLogIndex\030\003"
    " \001(\004\022\023\n\013lastLogTerm\030\004 \001(\004\"8\n\023RequestVote"
    "Response\022\014\n\004term\030\001 \001(\004\022\023\n\013voteGranted\030\002 "
    "\001(\010\"\212\003\n\007RaftRPC\0226\n\017logEntryRequest\030\001 \001(\013"
    "2\033.RaftCommon.LogEntryRequestH\000\0228\n\020logEn"
    "tryResponse\030\002 \001(\0132\034.RaftCommon.LogEntryR"
    "esponseH\000\022@\n\024appendEntriesRequest\030\003 \001(\0132"
    " .RaftCommon.AppendEntriesRequestH\000\022B\n\025a"
    "ppendEntriesResponse\030\004 \001(\0132!.RaftCommon."
    "AppendEntriesResponseH\000\022<\n\022requestVoteRe"
    "quest\030\005 \001(\0132\036.RaftCommon.RequestVoteRequ"
    "estH\000\022>\n\023requestVoteResponse\030\006 \001(\0132\037.Raf"
    "tCommon.RequestVoteResponseH\000B\t\n\007payload"
    "b\006proto3"
};
static ::absl::once_flag descriptor_table_raftrpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raftrpc_2eproto = {
    false,
    false,
    928,
    descriptor_table_protodef_raftrpc_2eproto,
    "raftrpc.proto",
    &descriptor_table_raftrpc_2eproto_once,
    nullptr,
    0,
    8,
    schemas,
    file_default_instances,
    TableStruct_raftrpc_2eproto::offsets,
    file_level_metadata_raftrpc_2eproto,
    file_level_enum_descriptors_raftrpc_2eproto,
    file_level_service_descriptors_raftrpc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raftrpc_2eproto_getter() {
  return &descriptor_table_raftrpc_2eproto;
}
namespace RaftCommon {
// ===================================================================

class LogEntryRequest::_Internal {
 public:
};

LogEntryRequest::LogEntryRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RaftCommon.LogEntryRequest)
}
inline PROTOBUF_NDEBUG_INLINE LogEntryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : cmd_(arena, from.cmd_),
        _cached_size_{0} {}

LogEntryRequest::LogEntryRequest(
    ::google::protobuf::Arena* arena,
    const LogEntryRequest& from)
    : ::google::protobuf::Message(arena) {
  LogEntryRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:RaftCommon.LogEntryRequest)
}
inline PROTOBUF_NDEBUG_INLINE LogEntryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : cmd_(arena),
        _cached_size_{0} {}

inline void LogEntryRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LogEntryRequest::~LogEntryRequest() {
  // @@protoc_insertion_point(destructor:RaftCommon.LogEntryRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogEntryRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.cmd_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
LogEntryRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(LogEntryRequest, _impl_._cached_size_),
              false,
          },
          &LogEntryRequest::MergeImpl,
          &LogEntryRequest::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void LogEntryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftCommon.LogEntryRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmd_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogEntryRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> LogEntryRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LogEntryRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RaftCommon::LogEntryRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes cmd = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntryRequest, _impl_.cmd_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes cmd = 1;
    {PROTOBUF_FIELD_OFFSET(LogEntryRequest, _impl_.cmd_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* LogEntryRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftCommon.LogEntryRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes cmd = 1;
  if (!this->_internal_cmd().empty()) {
    const std::string& _s = this->_internal_cmd();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftCommon.LogEntryRequest)
  return target;
}

::size_t LogEntryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftCommon.LogEntryRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cmd = 1;
  if (!this->_internal_cmd().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void LogEntryRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LogEntryRequest*>(&to_msg);
  auto& from = static_cast<const LogEntryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftCommon.LogEntryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cmd().empty()) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntryRequest::CopyFrom(const LogEntryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftCommon.LogEntryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogEntryRequest::IsInitialized() const {
  return true;
}

void LogEntryRequest::InternalSwap(LogEntryRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cmd_, &other->_impl_.cmd_, arena);
}

::google::protobuf::Metadata LogEntryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_raftrpc_2eproto_getter,
                                   &descriptor_table_raftrpc_2eproto_once,
                                   file_level_metadata_raftrpc_2eproto[0]);
}
// ===================================================================

class LogEntryResponse::_Internal {
 public:
};

LogEntryResponse::LogEntryResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RaftCommon.LogEntryResponse)
}
inline PROTOBUF_NDEBUG_INLINE LogEntryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : ret_(arena, from.ret_),
        _cached_size_{0} {}

LogEntryResponse::LogEntryResponse(
    ::google::protobuf::Arena* arena,
    const LogEntryResponse& from)
    : ::google::protobuf::Message(arena) {
  LogEntryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:RaftCommon.LogEntryResponse)
}
inline PROTOBUF_NDEBUG_INLINE LogEntryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : ret_(arena),
        _cached_size_{0} {}

inline void LogEntryResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
LogEntryResponse::~LogEntryResponse() {
  // @@protoc_insertion_point(destructor:RaftCommon.LogEntryResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogEntryResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.ret_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
LogEntryResponse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(LogEntryResponse, _impl_._cached_size_),
              false,
          },
          &LogEntryResponse::MergeImpl,
          &LogEntryResponse::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void LogEntryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftCommon.LogEntryResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ret_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogEntryResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> LogEntryResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LogEntryResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RaftCommon::LogEntryResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes ret = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntryResponse, _impl_.ret_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(LogEntryResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntryResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(LogEntryResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bytes ret = 2;
    {PROTOBUF_FIELD_OFFSET(LogEntryResponse, _impl_.ret_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* LogEntryResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftCommon.LogEntryResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // bytes ret = 2;
  if (!this->_internal_ret().empty()) {
    const std::string& _s = this->_internal_ret();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftCommon.LogEntryResponse)
  return target;
}

::size_t LogEntryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftCommon.LogEntryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ret = 2;
  if (!this->_internal_ret().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_ret());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void LogEntryResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LogEntryResponse*>(&to_msg);
  auto& from = static_cast<const LogEntryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftCommon.LogEntryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ret().empty()) {
    _this->_internal_set_ret(from._internal_ret());
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntryResponse::CopyFrom(const LogEntryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftCommon.LogEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogEntryResponse::IsInitialized() const {
  return true;
}

void LogEntryResponse::InternalSwap(LogEntryResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ret_, &other->_impl_.ret_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata LogEntryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_raftrpc_2eproto_getter,
                                   &descriptor_table_raftrpc_2eproto_once,
                                   file_level_metadata_raftrpc_2eproto[1]);
}
// ===================================================================

class LogEntry::_Internal {
 public:
};

LogEntry::LogEntry(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RaftCommon.LogEntry)
}
inline PROTOBUF_NDEBUG_INLINE LogEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : cmd_(arena, from.cmd_),
        _cached_size_{0} {}

LogEntry::LogEntry(
    ::google::protobuf::Arena* arena,
    const LogEntry& from)
    : ::google::protobuf::Message(arena) {
  LogEntry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.term_ = from._impl_.term_;

  // @@protoc_insertion_point(copy_constructor:RaftCommon.LogEntry)
}
inline PROTOBUF_NDEBUG_INLINE LogEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : cmd_(arena),
        _cached_size_{0} {}

inline void LogEntry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.term_ = {};
}
LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:RaftCommon.LogEntry)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogEntry::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.cmd_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
LogEntry::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(LogEntry, _impl_._cached_size_),
              false,
          },
          &LogEntry::MergeImpl,
          &LogEntry::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftCommon.LogEntry)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmd_.ClearToEmpty();
  _impl_.term_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> LogEntry::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LogEntry_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RaftCommon::LogEntry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 term = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogEntry, _impl_.term_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.term_)}},
    // bytes cmd = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.cmd_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes cmd = 1;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.cmd_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint64 term = 2;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.term_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* LogEntry::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftCommon.LogEntry)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes cmd = 1;
  if (!this->_internal_cmd().empty()) {
    const std::string& _s = this->_internal_cmd();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // uint64 term = 2;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftCommon.LogEntry)
  return target;
}

::size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftCommon.LogEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cmd = 1;
  if (!this->_internal_cmd().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_cmd());
  }

  // uint64 term = 2;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void LogEntry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LogEntry*>(&to_msg);
  auto& from = static_cast<const LogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftCommon.LogEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cmd().empty()) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  if (from._internal_term() != 0) {
    _this->_impl_.term_ = from._impl_.term_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftCommon.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cmd_, &other->_impl_.cmd_, arena);
        swap(_impl_.term_, other->_impl_.term_);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_raftrpc_2eproto_getter,
                                   &descriptor_table_raftrpc_2eproto_once,
                                   file_level_metadata_raftrpc_2eproto[2]);
}
// ===================================================================

class AppendEntriesRequest::_Internal {
 public:
};

AppendEntriesRequest::AppendEntriesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RaftCommon.AppendEntriesRequest)
}
inline PROTOBUF_NDEBUG_INLINE AppendEntriesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : entries_{visibility, arena, from.entries_},
        _cached_size_{0} {}

AppendEntriesRequest::AppendEntriesRequest(
    ::google::protobuf::Arena* arena,
    const AppendEntriesRequest& from)
    : ::google::protobuf::Message(arena) {
  AppendEntriesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, term_),
           offsetof(Impl_, leadercommit_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::leadercommit_));

  // @@protoc_insertion_point(copy_constructor:RaftCommon.AppendEntriesRequest)
}
inline PROTOBUF_NDEBUG_INLINE AppendEntriesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : entries_{visibility, arena},
        _cached_size_{0} {}

inline void AppendEntriesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           0,
           offsetof(Impl_, leadercommit_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::leadercommit_));
}
AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:RaftCommon.AppendEntriesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AppendEntriesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AppendEntriesRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_._cached_size_),
              false,
          },
          &AppendEntriesRequest::MergeImpl,
          &AppendEntriesRequest::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftCommon.AppendEntriesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  ::memset(&_impl_.term_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.leadercommit_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.leadercommit_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AppendEntriesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> AppendEntriesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AppendEntriesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RaftCommon::AppendEntriesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 term = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AppendEntriesRequest, _impl_.term_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.term_)}},
    // uint64 leaderId = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AppendEntriesRequest, _impl_.leaderid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.leaderid_)}},
    // uint64 prevLogIndex = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AppendEntriesRequest, _impl_.prevlogindex_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.prevlogindex_)}},
    // uint64 prevLogTerm = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AppendEntriesRequest, _impl_.prevlogterm_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.prevlogterm_)}},
    // repeated .RaftCommon.LogEntry entries = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.entries_)}},
    // uint64 leaderCommit = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AppendEntriesRequest, _impl_.leadercommit_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.leadercommit_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 term = 1;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.term_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 leaderId = 2;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.leaderid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 prevLogIndex = 3;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.prevlogindex_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 prevLogTerm = 4;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.prevlogterm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // repeated .RaftCommon.LogEntry entries = 5;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.entries_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 leaderCommit = 6;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.leadercommit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RaftCommon::LogEntry>()},
  }}, {{
  }},
};

::uint8_t* AppendEntriesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftCommon.AppendEntriesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_term(), target);
  }

  // uint64 leaderId = 2;
  if (this->_internal_leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_leaderid(), target);
  }

  // uint64 prevLogIndex = 3;
  if (this->_internal_prevlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_prevlogindex(), target);
  }

  // uint64 prevLogTerm = 4;
  if (this->_internal_prevlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_prevlogterm(), target);
  }

  // repeated .RaftCommon.LogEntry entries = 5;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_entries_size());
       i < n; i++) {
    const auto& repfield = this->_internal_entries().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            5, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // uint64 leaderCommit = 6;
  if (this->_internal_leadercommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_leadercommit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftCommon.AppendEntriesRequest)
  return target;
}

::size_t AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftCommon.AppendEntriesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RaftCommon.LogEntry entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_internal_entries()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  // uint64 leaderId = 2;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_leaderid());
  }

  // uint64 prevLogIndex = 3;
  if (this->_internal_prevlogindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_prevlogindex());
  }

  // uint64 prevLogTerm = 4;
  if (this->_internal_prevlogterm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_prevlogterm());
  }

  // uint64 leaderCommit = 6;
  if (this->_internal_leadercommit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_leadercommit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AppendEntriesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AppendEntriesRequest*>(&to_msg);
  auto& from = static_cast<const AppendEntriesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftCommon.AppendEntriesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entries()->MergeFrom(
      from._internal_entries());
  if (from._internal_term() != 0) {
    _this->_impl_.term_ = from._impl_.term_;
  }
  if (from._internal_leaderid() != 0) {
    _this->_impl_.leaderid_ = from._impl_.leaderid_;
  }
  if (from._internal_prevlogindex() != 0) {
    _this->_impl_.prevlogindex_ = from._impl_.prevlogindex_;
  }
  if (from._internal_prevlogterm() != 0) {
    _this->_impl_.prevlogterm_ = from._impl_.prevlogterm_;
  }
  if (from._internal_leadercommit() != 0) {
    _this->_impl_.leadercommit_ = from._impl_.leadercommit_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftCommon.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AppendEntriesRequest::IsInitialized() const {
  return true;
}

void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.leadercommit_)
      + sizeof(AppendEntriesRequest::_impl_.leadercommit_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::google::protobuf::Metadata AppendEntriesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_raftrpc_2eproto_getter,
                                   &descriptor_table_raftrpc_2eproto_once,
                                   file_level_metadata_raftrpc_2eproto[3]);
}
// ===================================================================

class AppendEntriesResponse::_Internal {
 public:
};

AppendEntriesResponse::AppendEntriesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RaftCommon.AppendEntriesResponse)
}
AppendEntriesResponse::AppendEntriesResponse(
    ::google::protobuf::Arena* arena, const AppendEntriesResponse& from)
    : AppendEntriesResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AppendEntriesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AppendEntriesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           0,
           offsetof(Impl_, success_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::success_));
}
AppendEntriesResponse::~AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:RaftCommon.AppendEntriesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AppendEntriesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AppendEntriesResponse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, _impl_._cached_size_),
              false,
          },
          &AppendEntriesResponse::MergeImpl,
          &AppendEntriesResponse::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftCommon.AppendEntriesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AppendEntriesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AppendEntriesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AppendEntriesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RaftCommon::AppendEntriesResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool success = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AppendEntriesResponse, _impl_.success_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, _impl_.success_)}},
    // uint64 term = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AppendEntriesResponse, _impl_.term_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, _impl_.term_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 term = 1;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, _impl_.term_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // bool success = 2;
    {PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AppendEntriesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftCommon.AppendEntriesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_term(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftCommon.AppendEntriesResponse)
  return target;
}

::size_t AppendEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftCommon.AppendEntriesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AppendEntriesResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AppendEntriesResponse*>(&to_msg);
  auto& from = static_cast<const AppendEntriesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftCommon.AppendEntriesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_impl_.term_ = from._impl_.term_;
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftCommon.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AppendEntriesResponse::IsInitialized() const {
  return true;
}

void AppendEntriesResponse::InternalSwap(AppendEntriesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, _impl_.success_)
      + sizeof(AppendEntriesResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::google::protobuf::Metadata AppendEntriesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_raftrpc_2eproto_getter,
                                   &descriptor_table_raftrpc_2eproto_once,
                                   file_level_metadata_raftrpc_2eproto[4]);
}
// ===================================================================

class RequestVoteRequest::_Internal {
 public:
};

RequestVoteRequest::RequestVoteRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RaftCommon.RequestVoteRequest)
}
RequestVoteRequest::RequestVoteRequest(
    ::google::protobuf::Arena* arena, const RequestVoteRequest& from)
    : RequestVoteRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RequestVoteRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RequestVoteRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           0,
           offsetof(Impl_, lastlogterm_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::lastlogterm_));
}
RequestVoteRequest::~RequestVoteRequest() {
  // @@protoc_insertion_point(destructor:RaftCommon.RequestVoteRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RequestVoteRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RequestVoteRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_._cached_size_),
              false,
          },
          &RequestVoteRequest::MergeImpl,
          &RequestVoteRequest::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RequestVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftCommon.RequestVoteRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.lastlogterm_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.lastlogterm_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RequestVoteRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> RequestVoteRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RequestVoteRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RaftCommon::RequestVoteRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 lastLogTerm = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RequestVoteRequest, _impl_.lastlogterm_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.lastlogterm_)}},
    // uint64 term = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RequestVoteRequest, _impl_.term_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.term_)}},
    // uint64 candidateId = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RequestVoteRequest, _impl_.candidateid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.candidateid_)}},
    // uint64 lastLogIndex = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RequestVoteRequest, _impl_.lastlogindex_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.lastlogindex_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 term = 1;
    {PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.term_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 candidateId = 2;
    {PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.candidateid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 lastLogIndex = 3;
    {PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.lastlogindex_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 lastLogTerm = 4;
    {PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.lastlogterm_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RequestVoteRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftCommon.RequestVoteRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_term(), target);
  }

  // uint64 candidateId = 2;
  if (this->_internal_candidateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_candidateid(), target);
  }

  // uint64 lastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_lastlogindex(), target);
  }

  // uint64 lastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_lastlogterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftCommon.RequestVoteRequest)
  return target;
}

::size_t RequestVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftCommon.RequestVoteRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  // uint64 candidateId = 2;
  if (this->_internal_candidateid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_candidateid());
  }

  // uint64 lastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_lastlogindex());
  }

  // uint64 lastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_lastlogterm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RequestVoteRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RequestVoteRequest*>(&to_msg);
  auto& from = static_cast<const RequestVoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftCommon.RequestVoteRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_impl_.term_ = from._impl_.term_;
  }
  if (from._internal_candidateid() != 0) {
    _this->_impl_.candidateid_ = from._impl_.candidateid_;
  }
  if (from._internal_lastlogindex() != 0) {
    _this->_impl_.lastlogindex_ = from._impl_.lastlogindex_;
  }
  if (from._internal_lastlogterm() != 0) {
    _this->_impl_.lastlogterm_ = from._impl_.lastlogterm_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteRequest::CopyFrom(const RequestVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftCommon.RequestVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RequestVoteRequest::IsInitialized() const {
  return true;
}

void RequestVoteRequest::InternalSwap(RequestVoteRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.lastlogterm_)
      + sizeof(RequestVoteRequest::_impl_.lastlogterm_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::google::protobuf::Metadata RequestVoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_raftrpc_2eproto_getter,
                                   &descriptor_table_raftrpc_2eproto_once,
                                   file_level_metadata_raftrpc_2eproto[5]);
}
// ===================================================================

class RequestVoteResponse::_Internal {
 public:
};

RequestVoteResponse::RequestVoteResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RaftCommon.RequestVoteResponse)
}
RequestVoteResponse::RequestVoteResponse(
    ::google::protobuf::Arena* arena, const RequestVoteResponse& from)
    : RequestVoteResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RequestVoteResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RequestVoteResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, term_),
           0,
           offsetof(Impl_, votegranted_) -
               offsetof(Impl_, term_) +
               sizeof(Impl_::votegranted_));
}
RequestVoteResponse::~RequestVoteResponse() {
  // @@protoc_insertion_point(destructor:RaftCommon.RequestVoteResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RequestVoteResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RequestVoteResponse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RequestVoteResponse, _impl_._cached_size_),
              false,
          },
          &RequestVoteResponse::MergeImpl,
          &RequestVoteResponse::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RequestVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftCommon.RequestVoteResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.votegranted_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.votegranted_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RequestVoteResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> RequestVoteResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RequestVoteResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RaftCommon::RequestVoteResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool voteGranted = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RequestVoteResponse, _impl_.votegranted_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RequestVoteResponse, _impl_.votegranted_)}},
    // uint64 term = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RequestVoteResponse, _impl_.term_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RequestVoteResponse, _impl_.term_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 term = 1;
    {PROTOBUF_FIELD_OFFSET(RequestVoteResponse, _impl_.term_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // bool voteGranted = 2;
    {PROTOBUF_FIELD_OFFSET(RequestVoteResponse, _impl_.votegranted_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RequestVoteResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftCommon.RequestVoteResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_term(), target);
  }

  // bool voteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_votegranted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftCommon.RequestVoteResponse)
  return target;
}

::size_t RequestVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftCommon.RequestVoteResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  // bool voteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RequestVoteResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RequestVoteResponse*>(&to_msg);
  auto& from = static_cast<const RequestVoteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftCommon.RequestVoteResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_impl_.term_ = from._impl_.term_;
  }
  if (from._internal_votegranted() != 0) {
    _this->_impl_.votegranted_ = from._impl_.votegranted_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteResponse::CopyFrom(const RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftCommon.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RequestVoteResponse::IsInitialized() const {
  return true;
}

void RequestVoteResponse::InternalSwap(RequestVoteResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteResponse, _impl_.votegranted_)
      + sizeof(RequestVoteResponse::_impl_.votegranted_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteResponse, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::google::protobuf::Metadata RequestVoteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_raftrpc_2eproto_getter,
                                   &descriptor_table_raftrpc_2eproto_once,
                                   file_level_metadata_raftrpc_2eproto[6]);
}
// ===================================================================

class RaftRPC::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::RaftCommon::RaftRPC, _impl_._oneof_case_);
};

void RaftRPC::set_allocated_logentryrequest(::RaftCommon::LogEntryRequest* logentryrequest) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (logentryrequest) {
    ::google::protobuf::Arena* submessage_arena = logentryrequest->GetArena();
    if (message_arena != submessage_arena) {
      logentryrequest = ::google::protobuf::internal::GetOwnedMessage(message_arena, logentryrequest, submessage_arena);
    }
    set_has_logentryrequest();
    _impl_.payload_.logentryrequest_ = logentryrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:RaftCommon.RaftRPC.logEntryRequest)
}
void RaftRPC::set_allocated_logentryresponse(::RaftCommon::LogEntryResponse* logentryresponse) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (logentryresponse) {
    ::google::protobuf::Arena* submessage_arena = logentryresponse->GetArena();
    if (message_arena != submessage_arena) {
      logentryresponse = ::google::protobuf::internal::GetOwnedMessage(message_arena, logentryresponse, submessage_arena);
    }
    set_has_logentryresponse();
    _impl_.payload_.logentryresponse_ = logentryresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:RaftCommon.RaftRPC.logEntryResponse)
}
void RaftRPC::set_allocated_appendentriesrequest(::RaftCommon::AppendEntriesRequest* appendentriesrequest) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (appendentriesrequest) {
    ::google::protobuf::Arena* submessage_arena = appendentriesrequest->GetArena();
    if (message_arena != submessage_arena) {
      appendentriesrequest = ::google::protobuf::internal::GetOwnedMessage(message_arena, appendentriesrequest, submessage_arena);
    }
    set_has_appendentriesrequest();
    _impl_.payload_.appendentriesrequest_ = appendentriesrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:RaftCommon.RaftRPC.appendEntriesRequest)
}
void RaftRPC::set_allocated_appendentriesresponse(::RaftCommon::AppendEntriesResponse* appendentriesresponse) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (appendentriesresponse) {
    ::google::protobuf::Arena* submessage_arena = appendentriesresponse->GetArena();
    if (message_arena != submessage_arena) {
      appendentriesresponse = ::google::protobuf::internal::GetOwnedMessage(message_arena, appendentriesresponse, submessage_arena);
    }
    set_has_appendentriesresponse();
    _impl_.payload_.appendentriesresponse_ = appendentriesresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:RaftCommon.RaftRPC.appendEntriesResponse)
}
void RaftRPC::set_allocated_requestvoterequest(::RaftCommon::RequestVoteRequest* requestvoterequest) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (requestvoterequest) {
    ::google::protobuf::Arena* submessage_arena = requestvoterequest->GetArena();
    if (message_arena != submessage_arena) {
      requestvoterequest = ::google::protobuf::internal::GetOwnedMessage(message_arena, requestvoterequest, submessage_arena);
    }
    set_has_requestvoterequest();
    _impl_.payload_.requestvoterequest_ = requestvoterequest;
  }
  // @@protoc_insertion_point(field_set_allocated:RaftCommon.RaftRPC.requestVoteRequest)
}
void RaftRPC::set_allocated_requestvoteresponse(::RaftCommon::RequestVoteResponse* requestvoteresponse) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (requestvoteresponse) {
    ::google::protobuf::Arena* submessage_arena = requestvoteresponse->GetArena();
    if (message_arena != submessage_arena) {
      requestvoteresponse = ::google::protobuf::internal::GetOwnedMessage(message_arena, requestvoteresponse, submessage_arena);
    }
    set_has_requestvoteresponse();
    _impl_.payload_.requestvoteresponse_ = requestvoteresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:RaftCommon.RaftRPC.requestVoteResponse)
}
RaftRPC::RaftRPC(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RaftCommon.RaftRPC)
}
inline PROTOBUF_NDEBUG_INLINE RaftRPC::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

RaftRPC::RaftRPC(
    ::google::protobuf::Arena* arena,
    const RaftRPC& from)
    : ::google::protobuf::Message(arena) {
  RaftRPC* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kLogEntryRequest:
        _impl_.payload_.logentryrequest_ = ::google::protobuf::Message::CopyConstruct<::RaftCommon::LogEntryRequest>(arena, *from._impl_.payload_.logentryrequest_);
        break;
      case kLogEntryResponse:
        _impl_.payload_.logentryresponse_ = ::google::protobuf::Message::CopyConstruct<::RaftCommon::LogEntryResponse>(arena, *from._impl_.payload_.logentryresponse_);
        break;
      case kAppendEntriesRequest:
        _impl_.payload_.appendentriesrequest_ = ::google::protobuf::Message::CopyConstruct<::RaftCommon::AppendEntriesRequest>(arena, *from._impl_.payload_.appendentriesrequest_);
        break;
      case kAppendEntriesResponse:
        _impl_.payload_.appendentriesresponse_ = ::google::protobuf::Message::CopyConstruct<::RaftCommon::AppendEntriesResponse>(arena, *from._impl_.payload_.appendentriesresponse_);
        break;
      case kRequestVoteRequest:
        _impl_.payload_.requestvoterequest_ = ::google::protobuf::Message::CopyConstruct<::RaftCommon::RequestVoteRequest>(arena, *from._impl_.payload_.requestvoterequest_);
        break;
      case kRequestVoteResponse:
        _impl_.payload_.requestvoteresponse_ = ::google::protobuf::Message::CopyConstruct<::RaftCommon::RequestVoteResponse>(arena, *from._impl_.payload_.requestvoteresponse_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:RaftCommon.RaftRPC)
}
inline PROTOBUF_NDEBUG_INLINE RaftRPC::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void RaftRPC::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RaftRPC::~RaftRPC() {
  // @@protoc_insertion_point(destructor:RaftCommon.RaftRPC)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RaftRPC::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
  _impl_.~Impl_();
}

void RaftRPC::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:RaftCommon.RaftRPC)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (payload_case()) {
    case kLogEntryRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.logentryrequest_;
      }
      break;
    }
    case kLogEntryResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.logentryresponse_;
      }
      break;
    }
    case kAppendEntriesRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.appendentriesrequest_;
      }
      break;
    }
    case kAppendEntriesResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.appendentriesresponse_;
      }
      break;
    }
    case kRequestVoteRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.requestvoterequest_;
      }
      break;
    }
    case kRequestVoteResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.requestvoteresponse_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
RaftRPC::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(RaftRPC, _impl_._cached_size_),
              false,
          },
          &RaftRPC::MergeImpl,
          &RaftRPC::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void RaftRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftCommon.RaftRPC)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RaftRPC::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 6, 6, 0, 2> RaftRPC::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RaftRPC_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RaftCommon::RaftRPC>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .RaftCommon.LogEntryRequest logEntryRequest = 1;
    {PROTOBUF_FIELD_OFFSET(RaftRPC, _impl_.payload_.logentryrequest_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .RaftCommon.LogEntryResponse logEntryResponse = 2;
    {PROTOBUF_FIELD_OFFSET(RaftRPC, _impl_.payload_.logentryresponse_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .RaftCommon.AppendEntriesRequest appendEntriesRequest = 3;
    {PROTOBUF_FIELD_OFFSET(RaftRPC, _impl_.payload_.appendentriesrequest_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .RaftCommon.AppendEntriesResponse appendEntriesResponse = 4;
    {PROTOBUF_FIELD_OFFSET(RaftRPC, _impl_.payload_.appendentriesresponse_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .RaftCommon.RequestVoteRequest requestVoteRequest = 5;
    {PROTOBUF_FIELD_OFFSET(RaftRPC, _impl_.payload_.requestvoterequest_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .RaftCommon.RequestVoteResponse requestVoteResponse = 6;
    {PROTOBUF_FIELD_OFFSET(RaftRPC, _impl_.payload_.requestvoteresponse_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RaftCommon::LogEntryRequest>()},
    {::_pbi::TcParser::GetTable<::RaftCommon::LogEntryResponse>()},
    {::_pbi::TcParser::GetTable<::RaftCommon::AppendEntriesRequest>()},
    {::_pbi::TcParser::GetTable<::RaftCommon::AppendEntriesResponse>()},
    {::_pbi::TcParser::GetTable<::RaftCommon::RequestVoteRequest>()},
    {::_pbi::TcParser::GetTable<::RaftCommon::RequestVoteResponse>()},
  }}, {{
  }},
};

::uint8_t* RaftRPC::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftCommon.RaftRPC)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (payload_case()) {
    case kLogEntryRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *_impl_.payload_.logentryrequest_, _impl_.payload_.logentryrequest_->GetCachedSize(), target, stream);
      break;
    }
    case kLogEntryResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *_impl_.payload_.logentryresponse_, _impl_.payload_.logentryresponse_->GetCachedSize(), target, stream);
      break;
    }
    case kAppendEntriesRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *_impl_.payload_.appendentriesrequest_, _impl_.payload_.appendentriesrequest_->GetCachedSize(), target, stream);
      break;
    }
    case kAppendEntriesResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *_impl_.payload_.appendentriesresponse_, _impl_.payload_.appendentriesresponse_->GetCachedSize(), target, stream);
      break;
    }
    case kRequestVoteRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *_impl_.payload_.requestvoterequest_, _impl_.payload_.requestvoterequest_->GetCachedSize(), target, stream);
      break;
    }
    case kRequestVoteResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *_impl_.payload_.requestvoteresponse_, _impl_.payload_.requestvoteresponse_->GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftCommon.RaftRPC)
  return target;
}

::size_t RaftRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftCommon.RaftRPC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .RaftCommon.LogEntryRequest logEntryRequest = 1;
    case kLogEntryRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.logentryrequest_);
      break;
    }
    // .RaftCommon.LogEntryResponse logEntryResponse = 2;
    case kLogEntryResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.logentryresponse_);
      break;
    }
    // .RaftCommon.AppendEntriesRequest appendEntriesRequest = 3;
    case kAppendEntriesRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.appendentriesrequest_);
      break;
    }
    // .RaftCommon.AppendEntriesResponse appendEntriesResponse = 4;
    case kAppendEntriesResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.appendentriesresponse_);
      break;
    }
    // .RaftCommon.RequestVoteRequest requestVoteRequest = 5;
    case kRequestVoteRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.requestvoterequest_);
      break;
    }
    // .RaftCommon.RequestVoteResponse requestVoteResponse = 6;
    case kRequestVoteResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.requestvoteresponse_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void RaftRPC::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RaftRPC*>(&to_msg);
  auto& from = static_cast<const RaftRPC&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftCommon.RaftRPC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_payload();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kLogEntryRequest: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.logentryrequest_ =
              ::google::protobuf::Message::CopyConstruct<::RaftCommon::LogEntryRequest>(arena, *from._impl_.payload_.logentryrequest_);
        } else {
          _this->_impl_.payload_.logentryrequest_->MergeFrom(from._internal_logentryrequest());
        }
        break;
      }
      case kLogEntryResponse: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.logentryresponse_ =
              ::google::protobuf::Message::CopyConstruct<::RaftCommon::LogEntryResponse>(arena, *from._impl_.payload_.logentryresponse_);
        } else {
          _this->_impl_.payload_.logentryresponse_->MergeFrom(from._internal_logentryresponse());
        }
        break;
      }
      case kAppendEntriesRequest: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.appendentriesrequest_ =
              ::google::protobuf::Message::CopyConstruct<::RaftCommon::AppendEntriesRequest>(arena, *from._impl_.payload_.appendentriesrequest_);
        } else {
          _this->_impl_.payload_.appendentriesrequest_->MergeFrom(from._internal_appendentriesrequest());
        }
        break;
      }
      case kAppendEntriesResponse: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.appendentriesresponse_ =
              ::google::protobuf::Message::CopyConstruct<::RaftCommon::AppendEntriesResponse>(arena, *from._impl_.payload_.appendentriesresponse_);
        } else {
          _this->_impl_.payload_.appendentriesresponse_->MergeFrom(from._internal_appendentriesresponse());
        }
        break;
      }
      case kRequestVoteRequest: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.requestvoterequest_ =
              ::google::protobuf::Message::CopyConstruct<::RaftCommon::RequestVoteRequest>(arena, *from._impl_.payload_.requestvoterequest_);
        } else {
          _this->_impl_.payload_.requestvoterequest_->MergeFrom(from._internal_requestvoterequest());
        }
        break;
      }
      case kRequestVoteResponse: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.requestvoteresponse_ =
              ::google::protobuf::Message::CopyConstruct<::RaftCommon::RequestVoteResponse>(arena, *from._impl_.payload_.requestvoteresponse_);
        } else {
          _this->_impl_.payload_.requestvoteresponse_->MergeFrom(from._internal_requestvoteresponse());
        }
        break;
      }
      case PAYLOAD_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RaftRPC::CopyFrom(const RaftRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftCommon.RaftRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RaftRPC::IsInitialized() const {
  return true;
}

void RaftRPC::InternalSwap(RaftRPC* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata RaftRPC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_raftrpc_2eproto_getter,
                                   &descriptor_table_raftrpc_2eproto_once,
                                   file_level_metadata_raftrpc_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace RaftCommon
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_raftrpc_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
