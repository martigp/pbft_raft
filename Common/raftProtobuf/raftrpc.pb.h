// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftrpc.proto
// Protobuf C++ Version: 4.26.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_raftrpc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_raftrpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 4026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_raftrpc_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_raftrpc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_raftrpc_2eproto;
namespace RaftCommon {
class AppendEntriesRequest;
struct AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class AppendEntriesResponse;
struct AppendEntriesResponseDefaultTypeInternal;
extern AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
class LogEntry;
struct LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class LogEntryRequest;
struct LogEntryRequestDefaultTypeInternal;
extern LogEntryRequestDefaultTypeInternal _LogEntryRequest_default_instance_;
class LogEntryResponse;
struct LogEntryResponseDefaultTypeInternal;
extern LogEntryResponseDefaultTypeInternal _LogEntryResponse_default_instance_;
class RaftRPC;
struct RaftRPCDefaultTypeInternal;
extern RaftRPCDefaultTypeInternal _RaftRPC_default_instance_;
class RequestVoteRequest;
struct RequestVoteRequestDefaultTypeInternal;
extern RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;
class RequestVoteResponse;
struct RequestVoteResponseDefaultTypeInternal;
extern RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
}  // namespace RaftCommon
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace RaftCommon {

// ===================================================================


// -------------------------------------------------------------------

class RequestVoteResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RaftCommon.RequestVoteResponse) */ {
 public:
  inline RequestVoteResponse() : RequestVoteResponse(nullptr) {}
  ~RequestVoteResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestVoteResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestVoteResponse(const RequestVoteResponse& from) : RequestVoteResponse(nullptr, from) {}
  inline RequestVoteResponse(RequestVoteResponse&& from) noexcept
      : RequestVoteResponse(nullptr, std::move(from)) {}
  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResponse& operator=(RequestVoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponse*>(
        &_RequestVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(RequestVoteResponse& a, RequestVoteResponse& b) { a.Swap(&b); }
  inline void Swap(RequestVoteResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RequestVoteResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestVoteResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestVoteResponse& from) { RequestVoteResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequestVoteResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RaftCommon.RequestVoteResponse"; }

 protected:
  explicit RequestVoteResponse(::google::protobuf::Arena* arena);
  RequestVoteResponse(::google::protobuf::Arena* arena, const RequestVoteResponse& from);
  RequestVoteResponse(::google::protobuf::Arena* arena, RequestVoteResponse&& from) noexcept
      : RequestVoteResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term() ;
  ::uint64_t term() const;
  void set_term(::uint64_t value);

  private:
  ::uint64_t _internal_term() const;
  void _internal_set_term(::uint64_t value);

  public:
  // bool voteGranted = 2;
  void clear_votegranted() ;
  bool votegranted() const;
  void set_votegranted(bool value);

  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RaftCommon.RequestVoteResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t term_;
    bool votegranted_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftrpc_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RaftCommon.RequestVoteRequest) */ {
 public:
  inline RequestVoteRequest() : RequestVoteRequest(nullptr) {}
  ~RequestVoteRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestVoteRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestVoteRequest(const RequestVoteRequest& from) : RequestVoteRequest(nullptr, from) {}
  inline RequestVoteRequest(RequestVoteRequest&& from) noexcept
      : RequestVoteRequest(nullptr, std::move(from)) {}
  inline RequestVoteRequest& operator=(const RequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteRequest& operator=(RequestVoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteRequest* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRequest*>(
        &_RequestVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(RequestVoteRequest& a, RequestVoteRequest& b) { a.Swap(&b); }
  inline void Swap(RequestVoteRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RequestVoteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestVoteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestVoteRequest& from) { RequestVoteRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequestVoteRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RaftCommon.RequestVoteRequest"; }

 protected:
  explicit RequestVoteRequest(::google::protobuf::Arena* arena);
  RequestVoteRequest(::google::protobuf::Arena* arena, const RequestVoteRequest& from);
  RequestVoteRequest(::google::protobuf::Arena* arena, RequestVoteRequest&& from) noexcept
      : RequestVoteRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // uint64 term = 1;
  void clear_term() ;
  ::uint64_t term() const;
  void set_term(::uint64_t value);

  private:
  ::uint64_t _internal_term() const;
  void _internal_set_term(::uint64_t value);

  public:
  // uint64 candidateId = 2;
  void clear_candidateid() ;
  ::uint64_t candidateid() const;
  void set_candidateid(::uint64_t value);

  private:
  ::uint64_t _internal_candidateid() const;
  void _internal_set_candidateid(::uint64_t value);

  public:
  // uint64 lastLogIndex = 3;
  void clear_lastlogindex() ;
  ::uint64_t lastlogindex() const;
  void set_lastlogindex(::uint64_t value);

  private:
  ::uint64_t _internal_lastlogindex() const;
  void _internal_set_lastlogindex(::uint64_t value);

  public:
  // uint64 lastLogTerm = 4;
  void clear_lastlogterm() ;
  ::uint64_t lastlogterm() const;
  void set_lastlogterm(::uint64_t value);

  private:
  ::uint64_t _internal_lastlogterm() const;
  void _internal_set_lastlogterm(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:RaftCommon.RequestVoteRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t term_;
    ::uint64_t candidateid_;
    ::uint64_t lastlogindex_;
    ::uint64_t lastlogterm_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftrpc_2eproto;
};
// -------------------------------------------------------------------

class LogEntryResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RaftCommon.LogEntryResponse) */ {
 public:
  inline LogEntryResponse() : LogEntryResponse(nullptr) {}
  ~LogEntryResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogEntryResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogEntryResponse(const LogEntryResponse& from) : LogEntryResponse(nullptr, from) {}
  inline LogEntryResponse(LogEntryResponse&& from) noexcept
      : LogEntryResponse(nullptr, std::move(from)) {}
  inline LogEntryResponse& operator=(const LogEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntryResponse& operator=(LogEntryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntryResponse* internal_default_instance() {
    return reinterpret_cast<const LogEntryResponse*>(
        &_LogEntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LogEntryResponse& a, LogEntryResponse& b) { a.Swap(&b); }
  inline void Swap(LogEntryResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntryResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LogEntryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogEntryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogEntryResponse& from) { LogEntryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogEntryResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RaftCommon.LogEntryResponse"; }

 protected:
  explicit LogEntryResponse(::google::protobuf::Arena* arena);
  LogEntryResponse(::google::protobuf::Arena* arena, const LogEntryResponse& from);
  LogEntryResponse(::google::protobuf::Arena* arena, LogEntryResponse&& from) noexcept
      : LogEntryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRetFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // bytes ret = 2;
  void clear_ret() ;
  const std::string& ret() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ret(Arg_&& arg, Args_... args);
  std::string* mutable_ret();
  PROTOBUF_NODISCARD std::string* release_ret();
  void set_allocated_ret(std::string* value);

  private:
  const std::string& _internal_ret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ret(
      const std::string& value);
  std::string* _internal_mutable_ret();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RaftCommon.LogEntryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr ret_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftrpc_2eproto;
};
// -------------------------------------------------------------------

class LogEntryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RaftCommon.LogEntryRequest) */ {
 public:
  inline LogEntryRequest() : LogEntryRequest(nullptr) {}
  ~LogEntryRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogEntryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogEntryRequest(const LogEntryRequest& from) : LogEntryRequest(nullptr, from) {}
  inline LogEntryRequest(LogEntryRequest&& from) noexcept
      : LogEntryRequest(nullptr, std::move(from)) {}
  inline LogEntryRequest& operator=(const LogEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntryRequest& operator=(LogEntryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntryRequest* internal_default_instance() {
    return reinterpret_cast<const LogEntryRequest*>(
        &_LogEntryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LogEntryRequest& a, LogEntryRequest& b) { a.Swap(&b); }
  inline void Swap(LogEntryRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntryRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LogEntryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogEntryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogEntryRequest& from) { LogEntryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogEntryRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RaftCommon.LogEntryRequest"; }

 protected:
  explicit LogEntryRequest(::google::protobuf::Arena* arena);
  LogEntryRequest(::google::protobuf::Arena* arena, const LogEntryRequest& from);
  LogEntryRequest(::google::protobuf::Arena* arena, LogEntryRequest&& from) noexcept
      : LogEntryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCmdFieldNumber = 1,
  };
  // bytes cmd = 1;
  void clear_cmd() ;
  const std::string& cmd() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cmd(Arg_&& arg, Args_... args);
  std::string* mutable_cmd();
  PROTOBUF_NODISCARD std::string* release_cmd();
  void set_allocated_cmd(std::string* value);

  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(
      const std::string& value);
  std::string* _internal_mutable_cmd();

  public:
  // @@protoc_insertion_point(class_scope:RaftCommon.LogEntryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr cmd_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftrpc_2eproto;
};
// -------------------------------------------------------------------

class LogEntry final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RaftCommon.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  ~LogEntry() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogEntry(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogEntry(const LogEntry& from) : LogEntry(nullptr, from) {}
  inline LogEntry(LogEntry&& from) noexcept
      : LogEntry(nullptr, std::move(from)) {}
  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
        &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(LogEntry& a, LogEntry& b) { a.Swap(&b); }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntry* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LogEntry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogEntry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogEntry& from) { LogEntry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogEntry* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RaftCommon.LogEntry"; }

 protected:
  explicit LogEntry(::google::protobuf::Arena* arena);
  LogEntry(::google::protobuf::Arena* arena, const LogEntry& from);
  LogEntry(::google::protobuf::Arena* arena, LogEntry&& from) noexcept
      : LogEntry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCmdFieldNumber = 1,
    kTermFieldNumber = 2,
  };
  // bytes cmd = 1;
  void clear_cmd() ;
  const std::string& cmd() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cmd(Arg_&& arg, Args_... args);
  std::string* mutable_cmd();
  PROTOBUF_NODISCARD std::string* release_cmd();
  void set_allocated_cmd(std::string* value);

  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(
      const std::string& value);
  std::string* _internal_mutable_cmd();

  public:
  // uint64 term = 2;
  void clear_term() ;
  ::uint64_t term() const;
  void set_term(::uint64_t value);

  private:
  ::uint64_t _internal_term() const;
  void _internal_set_term(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:RaftCommon.LogEntry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr cmd_;
    ::uint64_t term_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftrpc_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RaftCommon.AppendEntriesResponse) */ {
 public:
  inline AppendEntriesResponse() : AppendEntriesResponse(nullptr) {}
  ~AppendEntriesResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AppendEntriesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AppendEntriesResponse(const AppendEntriesResponse& from) : AppendEntriesResponse(nullptr, from) {}
  inline AppendEntriesResponse(AppendEntriesResponse&& from) noexcept
      : AppendEntriesResponse(nullptr, std::move(from)) {}
  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResponse& operator=(AppendEntriesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponse*>(
        &_AppendEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AppendEntriesResponse& a, AppendEntriesResponse& b) { a.Swap(&b); }
  inline void Swap(AppendEntriesResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AppendEntriesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AppendEntriesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AppendEntriesResponse& from) { AppendEntriesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AppendEntriesResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RaftCommon.AppendEntriesResponse"; }

 protected:
  explicit AppendEntriesResponse(::google::protobuf::Arena* arena);
  AppendEntriesResponse(::google::protobuf::Arena* arena, const AppendEntriesResponse& from);
  AppendEntriesResponse(::google::protobuf::Arena* arena, AppendEntriesResponse&& from) noexcept
      : AppendEntriesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term() ;
  ::uint64_t term() const;
  void set_term(::uint64_t value);

  private:
  ::uint64_t _internal_term() const;
  void _internal_set_term(::uint64_t value);

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RaftCommon.AppendEntriesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t term_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftrpc_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RaftCommon.AppendEntriesRequest) */ {
 public:
  inline AppendEntriesRequest() : AppendEntriesRequest(nullptr) {}
  ~AppendEntriesRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AppendEntriesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AppendEntriesRequest(const AppendEntriesRequest& from) : AppendEntriesRequest(nullptr, from) {}
  inline AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
      : AppendEntriesRequest(nullptr, std::move(from)) {}
  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
        &_AppendEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) { a.Swap(&b); }
  inline void Swap(AppendEntriesRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AppendEntriesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AppendEntriesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AppendEntriesRequest& from) { AppendEntriesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AppendEntriesRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RaftCommon.AppendEntriesRequest"; }

 protected:
  explicit AppendEntriesRequest(::google::protobuf::Arena* arena);
  AppendEntriesRequest(::google::protobuf::Arena* arena, const AppendEntriesRequest& from);
  AppendEntriesRequest(::google::protobuf::Arena* arena, AppendEntriesRequest&& from) noexcept
      : AppendEntriesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntriesFieldNumber = 5,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 6,
  };
  // repeated .RaftCommon.LogEntry entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::RaftCommon::LogEntry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField<::RaftCommon::LogEntry>* mutable_entries();

  private:
  const ::google::protobuf::RepeatedPtrField<::RaftCommon::LogEntry>& _internal_entries() const;
  ::google::protobuf::RepeatedPtrField<::RaftCommon::LogEntry>* _internal_mutable_entries();
  public:
  const ::RaftCommon::LogEntry& entries(int index) const;
  ::RaftCommon::LogEntry* add_entries();
  const ::google::protobuf::RepeatedPtrField<::RaftCommon::LogEntry>& entries() const;
  // uint64 term = 1;
  void clear_term() ;
  ::uint64_t term() const;
  void set_term(::uint64_t value);

  private:
  ::uint64_t _internal_term() const;
  void _internal_set_term(::uint64_t value);

  public:
  // uint64 leaderId = 2;
  void clear_leaderid() ;
  ::uint64_t leaderid() const;
  void set_leaderid(::uint64_t value);

  private:
  ::uint64_t _internal_leaderid() const;
  void _internal_set_leaderid(::uint64_t value);

  public:
  // uint64 prevLogIndex = 3;
  void clear_prevlogindex() ;
  ::uint64_t prevlogindex() const;
  void set_prevlogindex(::uint64_t value);

  private:
  ::uint64_t _internal_prevlogindex() const;
  void _internal_set_prevlogindex(::uint64_t value);

  public:
  // uint64 prevLogTerm = 4;
  void clear_prevlogterm() ;
  ::uint64_t prevlogterm() const;
  void set_prevlogterm(::uint64_t value);

  private:
  ::uint64_t _internal_prevlogterm() const;
  void _internal_set_prevlogterm(::uint64_t value);

  public:
  // uint64 leaderCommit = 6;
  void clear_leadercommit() ;
  ::uint64_t leadercommit() const;
  void set_leadercommit(::uint64_t value);

  private:
  ::uint64_t _internal_leadercommit() const;
  void _internal_set_leadercommit(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:RaftCommon.AppendEntriesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::RaftCommon::LogEntry > entries_;
    ::uint64_t term_;
    ::uint64_t leaderid_;
    ::uint64_t prevlogindex_;
    ::uint64_t prevlogterm_;
    ::uint64_t leadercommit_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftrpc_2eproto;
};
// -------------------------------------------------------------------

class RaftRPC final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RaftCommon.RaftRPC) */ {
 public:
  inline RaftRPC() : RaftRPC(nullptr) {}
  ~RaftRPC() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RaftRPC(
      ::google::protobuf::internal::ConstantInitialized);

  inline RaftRPC(const RaftRPC& from) : RaftRPC(nullptr, from) {}
  inline RaftRPC(RaftRPC&& from) noexcept
      : RaftRPC(nullptr, std::move(from)) {}
  inline RaftRPC& operator=(const RaftRPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftRPC& operator=(RaftRPC&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftRPC& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kLogEntryRequest = 1,
    kLogEntryResponse = 2,
    kAppendEntriesRequest = 3,
    kAppendEntriesResponse = 4,
    kRequestVoteRequest = 5,
    kRequestVoteResponse = 6,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const RaftRPC* internal_default_instance() {
    return reinterpret_cast<const RaftRPC*>(
        &_RaftRPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(RaftRPC& a, RaftRPC& b) { a.Swap(&b); }
  inline void Swap(RaftRPC* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftRPC* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftRPC* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RaftRPC>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RaftRPC& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RaftRPC& from) { RaftRPC::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RaftRPC* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RaftCommon.RaftRPC"; }

 protected:
  explicit RaftRPC(::google::protobuf::Arena* arena);
  RaftRPC(::google::protobuf::Arena* arena, const RaftRPC& from);
  RaftRPC(::google::protobuf::Arena* arena, RaftRPC&& from) noexcept
      : RaftRPC(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogEntryRequestFieldNumber = 1,
    kLogEntryResponseFieldNumber = 2,
    kAppendEntriesRequestFieldNumber = 3,
    kAppendEntriesResponseFieldNumber = 4,
    kRequestVoteRequestFieldNumber = 5,
    kRequestVoteResponseFieldNumber = 6,
  };
  // .RaftCommon.LogEntryRequest logEntryRequest = 1;
  bool has_logentryrequest() const;
  private:
  bool _internal_has_logentryrequest() const;

  public:
  void clear_logentryrequest() ;
  const ::RaftCommon::LogEntryRequest& logentryrequest() const;
  PROTOBUF_NODISCARD ::RaftCommon::LogEntryRequest* release_logentryrequest();
  ::RaftCommon::LogEntryRequest* mutable_logentryrequest();
  void set_allocated_logentryrequest(::RaftCommon::LogEntryRequest* value);
  void unsafe_arena_set_allocated_logentryrequest(::RaftCommon::LogEntryRequest* value);
  ::RaftCommon::LogEntryRequest* unsafe_arena_release_logentryrequest();

  private:
  const ::RaftCommon::LogEntryRequest& _internal_logentryrequest() const;
  ::RaftCommon::LogEntryRequest* _internal_mutable_logentryrequest();

  public:
  // .RaftCommon.LogEntryResponse logEntryResponse = 2;
  bool has_logentryresponse() const;
  private:
  bool _internal_has_logentryresponse() const;

  public:
  void clear_logentryresponse() ;
  const ::RaftCommon::LogEntryResponse& logentryresponse() const;
  PROTOBUF_NODISCARD ::RaftCommon::LogEntryResponse* release_logentryresponse();
  ::RaftCommon::LogEntryResponse* mutable_logentryresponse();
  void set_allocated_logentryresponse(::RaftCommon::LogEntryResponse* value);
  void unsafe_arena_set_allocated_logentryresponse(::RaftCommon::LogEntryResponse* value);
  ::RaftCommon::LogEntryResponse* unsafe_arena_release_logentryresponse();

  private:
  const ::RaftCommon::LogEntryResponse& _internal_logentryresponse() const;
  ::RaftCommon::LogEntryResponse* _internal_mutable_logentryresponse();

  public:
  // .RaftCommon.AppendEntriesRequest appendEntriesRequest = 3;
  bool has_appendentriesrequest() const;
  private:
  bool _internal_has_appendentriesrequest() const;

  public:
  void clear_appendentriesrequest() ;
  const ::RaftCommon::AppendEntriesRequest& appendentriesrequest() const;
  PROTOBUF_NODISCARD ::RaftCommon::AppendEntriesRequest* release_appendentriesrequest();
  ::RaftCommon::AppendEntriesRequest* mutable_appendentriesrequest();
  void set_allocated_appendentriesrequest(::RaftCommon::AppendEntriesRequest* value);
  void unsafe_arena_set_allocated_appendentriesrequest(::RaftCommon::AppendEntriesRequest* value);
  ::RaftCommon::AppendEntriesRequest* unsafe_arena_release_appendentriesrequest();

  private:
  const ::RaftCommon::AppendEntriesRequest& _internal_appendentriesrequest() const;
  ::RaftCommon::AppendEntriesRequest* _internal_mutable_appendentriesrequest();

  public:
  // .RaftCommon.AppendEntriesResponse appendEntriesResponse = 4;
  bool has_appendentriesresponse() const;
  private:
  bool _internal_has_appendentriesresponse() const;

  public:
  void clear_appendentriesresponse() ;
  const ::RaftCommon::AppendEntriesResponse& appendentriesresponse() const;
  PROTOBUF_NODISCARD ::RaftCommon::AppendEntriesResponse* release_appendentriesresponse();
  ::RaftCommon::AppendEntriesResponse* mutable_appendentriesresponse();
  void set_allocated_appendentriesresponse(::RaftCommon::AppendEntriesResponse* value);
  void unsafe_arena_set_allocated_appendentriesresponse(::RaftCommon::AppendEntriesResponse* value);
  ::RaftCommon::AppendEntriesResponse* unsafe_arena_release_appendentriesresponse();

  private:
  const ::RaftCommon::AppendEntriesResponse& _internal_appendentriesresponse() const;
  ::RaftCommon::AppendEntriesResponse* _internal_mutable_appendentriesresponse();

  public:
  // .RaftCommon.RequestVoteRequest requestVoteRequest = 5;
  bool has_requestvoterequest() const;
  private:
  bool _internal_has_requestvoterequest() const;

  public:
  void clear_requestvoterequest() ;
  const ::RaftCommon::RequestVoteRequest& requestvoterequest() const;
  PROTOBUF_NODISCARD ::RaftCommon::RequestVoteRequest* release_requestvoterequest();
  ::RaftCommon::RequestVoteRequest* mutable_requestvoterequest();
  void set_allocated_requestvoterequest(::RaftCommon::RequestVoteRequest* value);
  void unsafe_arena_set_allocated_requestvoterequest(::RaftCommon::RequestVoteRequest* value);
  ::RaftCommon::RequestVoteRequest* unsafe_arena_release_requestvoterequest();

  private:
  const ::RaftCommon::RequestVoteRequest& _internal_requestvoterequest() const;
  ::RaftCommon::RequestVoteRequest* _internal_mutable_requestvoterequest();

  public:
  // .RaftCommon.RequestVoteResponse requestVoteResponse = 6;
  bool has_requestvoteresponse() const;
  private:
  bool _internal_has_requestvoteresponse() const;

  public:
  void clear_requestvoteresponse() ;
  const ::RaftCommon::RequestVoteResponse& requestvoteresponse() const;
  PROTOBUF_NODISCARD ::RaftCommon::RequestVoteResponse* release_requestvoteresponse();
  ::RaftCommon::RequestVoteResponse* mutable_requestvoteresponse();
  void set_allocated_requestvoteresponse(::RaftCommon::RequestVoteResponse* value);
  void unsafe_arena_set_allocated_requestvoteresponse(::RaftCommon::RequestVoteResponse* value);
  ::RaftCommon::RequestVoteResponse* unsafe_arena_release_requestvoteresponse();

  private:
  const ::RaftCommon::RequestVoteResponse& _internal_requestvoteresponse() const;
  ::RaftCommon::RequestVoteResponse* _internal_mutable_requestvoteresponse();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:RaftCommon.RaftRPC)
 private:
  class _Internal;
  void set_has_logentryrequest();
  void set_has_logentryresponse();
  void set_has_appendentriesrequest();
  void set_has_appendentriesresponse();
  void set_has_requestvoterequest();
  void set_has_requestvoteresponse();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 6, 6,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::RaftCommon::LogEntryRequest* logentryrequest_;
      ::RaftCommon::LogEntryResponse* logentryresponse_;
      ::RaftCommon::AppendEntriesRequest* appendentriesrequest_;
      ::RaftCommon::AppendEntriesResponse* appendentriesresponse_;
      ::RaftCommon::RequestVoteRequest* requestvoterequest_;
      ::RaftCommon::RequestVoteResponse* requestvoteresponse_;
    } payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raftrpc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LogEntryRequest

// bytes cmd = 1;
inline void LogEntryRequest::clear_cmd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cmd_.ClearToEmpty();
}
inline const std::string& LogEntryRequest::cmd() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RaftCommon.LogEntryRequest.cmd)
  return _internal_cmd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntryRequest::set_cmd(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cmd_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RaftCommon.LogEntryRequest.cmd)
}
inline std::string* LogEntryRequest::mutable_cmd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:RaftCommon.LogEntryRequest.cmd)
  return _s;
}
inline const std::string& LogEntryRequest::_internal_cmd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cmd_.Get();
}
inline void LogEntryRequest::_internal_set_cmd(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cmd_.Set(value, GetArena());
}
inline std::string* LogEntryRequest::_internal_mutable_cmd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.cmd_.Mutable( GetArena());
}
inline std::string* LogEntryRequest::release_cmd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RaftCommon.LogEntryRequest.cmd)
  return _impl_.cmd_.Release();
}
inline void LogEntryRequest::set_allocated_cmd(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cmd_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cmd_.IsDefault()) {
          _impl_.cmd_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftCommon.LogEntryRequest.cmd)
}

// -------------------------------------------------------------------

// LogEntryResponse

// bool success = 1;
inline void LogEntryResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool LogEntryResponse::success() const {
  // @@protoc_insertion_point(field_get:RaftCommon.LogEntryResponse.success)
  return _internal_success();
}
inline void LogEntryResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:RaftCommon.LogEntryResponse.success)
}
inline bool LogEntryResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void LogEntryResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = value;
}

// bytes ret = 2;
inline void LogEntryResponse::clear_ret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ret_.ClearToEmpty();
}
inline const std::string& LogEntryResponse::ret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RaftCommon.LogEntryResponse.ret)
  return _internal_ret();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntryResponse::set_ret(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ret_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RaftCommon.LogEntryResponse.ret)
}
inline std::string* LogEntryResponse::mutable_ret() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ret();
  // @@protoc_insertion_point(field_mutable:RaftCommon.LogEntryResponse.ret)
  return _s;
}
inline const std::string& LogEntryResponse::_internal_ret() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ret_.Get();
}
inline void LogEntryResponse::_internal_set_ret(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ret_.Set(value, GetArena());
}
inline std::string* LogEntryResponse::_internal_mutable_ret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.ret_.Mutable( GetArena());
}
inline std::string* LogEntryResponse::release_ret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RaftCommon.LogEntryResponse.ret)
  return _impl_.ret_.Release();
}
inline void LogEntryResponse::set_allocated_ret(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ret_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ret_.IsDefault()) {
          _impl_.ret_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftCommon.LogEntryResponse.ret)
}

// -------------------------------------------------------------------

// LogEntry

// bytes cmd = 1;
inline void LogEntry::clear_cmd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cmd_.ClearToEmpty();
}
inline const std::string& LogEntry::cmd() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RaftCommon.LogEntry.cmd)
  return _internal_cmd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_cmd(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cmd_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RaftCommon.LogEntry.cmd)
}
inline std::string* LogEntry::mutable_cmd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:RaftCommon.LogEntry.cmd)
  return _s;
}
inline const std::string& LogEntry::_internal_cmd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cmd_.Get();
}
inline void LogEntry::_internal_set_cmd(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cmd_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_cmd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.cmd_.Mutable( GetArena());
}
inline std::string* LogEntry::release_cmd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RaftCommon.LogEntry.cmd)
  return _impl_.cmd_.Release();
}
inline void LogEntry::set_allocated_cmd(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cmd_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cmd_.IsDefault()) {
          _impl_.cmd_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftCommon.LogEntry.cmd)
}

// uint64 term = 2;
inline void LogEntry::clear_term() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.term_ = ::uint64_t{0u};
}
inline ::uint64_t LogEntry::term() const {
  // @@protoc_insertion_point(field_get:RaftCommon.LogEntry.term)
  return _internal_term();
}
inline void LogEntry::set_term(::uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:RaftCommon.LogEntry.term)
}
inline ::uint64_t LogEntry::_internal_term() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.term_;
}
inline void LogEntry::_internal_set_term(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.term_ = value;
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// uint64 term = 1;
inline void AppendEntriesRequest::clear_term() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.term_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:RaftCommon.AppendEntriesRequest.term)
  return _internal_term();
}
inline void AppendEntriesRequest::set_term(::uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:RaftCommon.AppendEntriesRequest.term)
}
inline ::uint64_t AppendEntriesRequest::_internal_term() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.term_;
}
inline void AppendEntriesRequest::_internal_set_term(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.term_ = value;
}

// uint64 leaderId = 2;
inline void AppendEntriesRequest::clear_leaderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesRequest::leaderid() const {
  // @@protoc_insertion_point(field_get:RaftCommon.AppendEntriesRequest.leaderId)
  return _internal_leaderid();
}
inline void AppendEntriesRequest::set_leaderid(::uint64_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:RaftCommon.AppendEntriesRequest.leaderId)
}
inline ::uint64_t AppendEntriesRequest::_internal_leaderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leaderid_;
}
inline void AppendEntriesRequest::_internal_set_leaderid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = value;
}

// uint64 prevLogIndex = 3;
inline void AppendEntriesRequest::clear_prevlogindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prevlogindex_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesRequest::prevlogindex() const {
  // @@protoc_insertion_point(field_get:RaftCommon.AppendEntriesRequest.prevLogIndex)
  return _internal_prevlogindex();
}
inline void AppendEntriesRequest::set_prevlogindex(::uint64_t value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:RaftCommon.AppendEntriesRequest.prevLogIndex)
}
inline ::uint64_t AppendEntriesRequest::_internal_prevlogindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prevlogindex_;
}
inline void AppendEntriesRequest::_internal_set_prevlogindex(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prevlogindex_ = value;
}

// uint64 prevLogTerm = 4;
inline void AppendEntriesRequest::clear_prevlogterm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prevlogterm_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesRequest::prevlogterm() const {
  // @@protoc_insertion_point(field_get:RaftCommon.AppendEntriesRequest.prevLogTerm)
  return _internal_prevlogterm();
}
inline void AppendEntriesRequest::set_prevlogterm(::uint64_t value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:RaftCommon.AppendEntriesRequest.prevLogTerm)
}
inline ::uint64_t AppendEntriesRequest::_internal_prevlogterm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prevlogterm_;
}
inline void AppendEntriesRequest::_internal_set_prevlogterm(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prevlogterm_ = value;
}

// repeated .RaftCommon.LogEntry entries = 5;
inline int AppendEntriesRequest::_internal_entries_size() const {
  return _internal_entries().size();
}
inline int AppendEntriesRequest::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntriesRequest::clear_entries() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.entries_.Clear();
}
inline ::RaftCommon::LogEntry* AppendEntriesRequest::mutable_entries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:RaftCommon.AppendEntriesRequest.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::RaftCommon::LogEntry>* AppendEntriesRequest::mutable_entries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:RaftCommon.AppendEntriesRequest.entries)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_entries();
}
inline const ::RaftCommon::LogEntry& AppendEntriesRequest::entries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RaftCommon.AppendEntriesRequest.entries)
  return _internal_entries().Get(index);
}
inline ::RaftCommon::LogEntry* AppendEntriesRequest::add_entries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::RaftCommon::LogEntry* _add = _internal_mutable_entries()->Add();
  // @@protoc_insertion_point(field_add:RaftCommon.AppendEntriesRequest.entries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::RaftCommon::LogEntry>& AppendEntriesRequest::entries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:RaftCommon.AppendEntriesRequest.entries)
  return _internal_entries();
}
inline const ::google::protobuf::RepeatedPtrField<::RaftCommon::LogEntry>&
AppendEntriesRequest::_internal_entries() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.entries_;
}
inline ::google::protobuf::RepeatedPtrField<::RaftCommon::LogEntry>*
AppendEntriesRequest::_internal_mutable_entries() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.entries_;
}

// uint64 leaderCommit = 6;
inline void AppendEntriesRequest::clear_leadercommit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leadercommit_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesRequest::leadercommit() const {
  // @@protoc_insertion_point(field_get:RaftCommon.AppendEntriesRequest.leaderCommit)
  return _internal_leadercommit();
}
inline void AppendEntriesRequest::set_leadercommit(::uint64_t value) {
  _internal_set_leadercommit(value);
  // @@protoc_insertion_point(field_set:RaftCommon.AppendEntriesRequest.leaderCommit)
}
inline ::uint64_t AppendEntriesRequest::_internal_leadercommit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leadercommit_;
}
inline void AppendEntriesRequest::_internal_set_leadercommit(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leadercommit_ = value;
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// uint64 term = 1;
inline void AppendEntriesResponse::clear_term() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.term_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:RaftCommon.AppendEntriesResponse.term)
  return _internal_term();
}
inline void AppendEntriesResponse::set_term(::uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:RaftCommon.AppendEntriesResponse.term)
}
inline ::uint64_t AppendEntriesResponse::_internal_term() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.term_;
}
inline void AppendEntriesResponse::_internal_set_term(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.term_ = value;
}

// bool success = 2;
inline void AppendEntriesResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:RaftCommon.AppendEntriesResponse.success)
  return _internal_success();
}
inline void AppendEntriesResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:RaftCommon.AppendEntriesResponse.success)
}
inline bool AppendEntriesResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void AppendEntriesResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// RequestVoteRequest

// uint64 term = 1;
inline void RequestVoteRequest::clear_term() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.term_ = ::uint64_t{0u};
}
inline ::uint64_t RequestVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:RaftCommon.RequestVoteRequest.term)
  return _internal_term();
}
inline void RequestVoteRequest::set_term(::uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:RaftCommon.RequestVoteRequest.term)
}
inline ::uint64_t RequestVoteRequest::_internal_term() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.term_;
}
inline void RequestVoteRequest::_internal_set_term(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.term_ = value;
}

// uint64 candidateId = 2;
inline void RequestVoteRequest::clear_candidateid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.candidateid_ = ::uint64_t{0u};
}
inline ::uint64_t RequestVoteRequest::candidateid() const {
  // @@protoc_insertion_point(field_get:RaftCommon.RequestVoteRequest.candidateId)
  return _internal_candidateid();
}
inline void RequestVoteRequest::set_candidateid(::uint64_t value) {
  _internal_set_candidateid(value);
  // @@protoc_insertion_point(field_set:RaftCommon.RequestVoteRequest.candidateId)
}
inline ::uint64_t RequestVoteRequest::_internal_candidateid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.candidateid_;
}
inline void RequestVoteRequest::_internal_set_candidateid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.candidateid_ = value;
}

// uint64 lastLogIndex = 3;
inline void RequestVoteRequest::clear_lastlogindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastlogindex_ = ::uint64_t{0u};
}
inline ::uint64_t RequestVoteRequest::lastlogindex() const {
  // @@protoc_insertion_point(field_get:RaftCommon.RequestVoteRequest.lastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVoteRequest::set_lastlogindex(::uint64_t value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:RaftCommon.RequestVoteRequest.lastLogIndex)
}
inline ::uint64_t RequestVoteRequest::_internal_lastlogindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastlogindex_;
}
inline void RequestVoteRequest::_internal_set_lastlogindex(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastlogindex_ = value;
}

// uint64 lastLogTerm = 4;
inline void RequestVoteRequest::clear_lastlogterm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastlogterm_ = ::uint64_t{0u};
}
inline ::uint64_t RequestVoteRequest::lastlogterm() const {
  // @@protoc_insertion_point(field_get:RaftCommon.RequestVoteRequest.lastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVoteRequest::set_lastlogterm(::uint64_t value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:RaftCommon.RequestVoteRequest.lastLogTerm)
}
inline ::uint64_t RequestVoteRequest::_internal_lastlogterm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastlogterm_;
}
inline void RequestVoteRequest::_internal_set_lastlogterm(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastlogterm_ = value;
}

// -------------------------------------------------------------------

// RequestVoteResponse

// uint64 term = 1;
inline void RequestVoteResponse::clear_term() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.term_ = ::uint64_t{0u};
}
inline ::uint64_t RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:RaftCommon.RequestVoteResponse.term)
  return _internal_term();
}
inline void RequestVoteResponse::set_term(::uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:RaftCommon.RequestVoteResponse.term)
}
inline ::uint64_t RequestVoteResponse::_internal_term() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.term_;
}
inline void RequestVoteResponse::_internal_set_term(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.term_ = value;
}

// bool voteGranted = 2;
inline void RequestVoteResponse::clear_votegranted() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.votegranted_ = false;
}
inline bool RequestVoteResponse::votegranted() const {
  // @@protoc_insertion_point(field_get:RaftCommon.RequestVoteResponse.voteGranted)
  return _internal_votegranted();
}
inline void RequestVoteResponse::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:RaftCommon.RequestVoteResponse.voteGranted)
}
inline bool RequestVoteResponse::_internal_votegranted() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.votegranted_;
}
inline void RequestVoteResponse::_internal_set_votegranted(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.votegranted_ = value;
}

// -------------------------------------------------------------------

// RaftRPC

// .RaftCommon.LogEntryRequest logEntryRequest = 1;
inline bool RaftRPC::has_logentryrequest() const {
  return payload_case() == kLogEntryRequest;
}
inline bool RaftRPC::_internal_has_logentryrequest() const {
  return payload_case() == kLogEntryRequest;
}
inline void RaftRPC::set_has_logentryrequest() {
  _impl_._oneof_case_[0] = kLogEntryRequest;
}
inline void RaftRPC::clear_logentryrequest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kLogEntryRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.logentryrequest_;
    }
    clear_has_payload();
  }
}
inline ::RaftCommon::LogEntryRequest* RaftRPC::release_logentryrequest() {
  // @@protoc_insertion_point(field_release:RaftCommon.RaftRPC.logEntryRequest)
  if (payload_case() == kLogEntryRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.logentryrequest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.logentryrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RaftCommon::LogEntryRequest& RaftRPC::_internal_logentryrequest() const {
  return payload_case() == kLogEntryRequest ? *_impl_.payload_.logentryrequest_ : reinterpret_cast<::RaftCommon::LogEntryRequest&>(::RaftCommon::_LogEntryRequest_default_instance_);
}
inline const ::RaftCommon::LogEntryRequest& RaftRPC::logentryrequest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RaftCommon.RaftRPC.logEntryRequest)
  return _internal_logentryrequest();
}
inline ::RaftCommon::LogEntryRequest* RaftRPC::unsafe_arena_release_logentryrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RaftCommon.RaftRPC.logEntryRequest)
  if (payload_case() == kLogEntryRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.logentryrequest_;
    _impl_.payload_.logentryrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftRPC::unsafe_arena_set_allocated_logentryrequest(::RaftCommon::LogEntryRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_logentryrequest();
    _impl_.payload_.logentryrequest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaftCommon.RaftRPC.logEntryRequest)
}
inline ::RaftCommon::LogEntryRequest* RaftRPC::_internal_mutable_logentryrequest() {
  if (payload_case() != kLogEntryRequest) {
    clear_payload();
    set_has_logentryrequest();
    _impl_.payload_.logentryrequest_ =
        ::google::protobuf::Message::DefaultConstruct<::RaftCommon::LogEntryRequest>(GetArena());
  }
  return _impl_.payload_.logentryrequest_;
}
inline ::RaftCommon::LogEntryRequest* RaftRPC::mutable_logentryrequest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::RaftCommon::LogEntryRequest* _msg = _internal_mutable_logentryrequest();
  // @@protoc_insertion_point(field_mutable:RaftCommon.RaftRPC.logEntryRequest)
  return _msg;
}

// .RaftCommon.LogEntryResponse logEntryResponse = 2;
inline bool RaftRPC::has_logentryresponse() const {
  return payload_case() == kLogEntryResponse;
}
inline bool RaftRPC::_internal_has_logentryresponse() const {
  return payload_case() == kLogEntryResponse;
}
inline void RaftRPC::set_has_logentryresponse() {
  _impl_._oneof_case_[0] = kLogEntryResponse;
}
inline void RaftRPC::clear_logentryresponse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kLogEntryResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.logentryresponse_;
    }
    clear_has_payload();
  }
}
inline ::RaftCommon::LogEntryResponse* RaftRPC::release_logentryresponse() {
  // @@protoc_insertion_point(field_release:RaftCommon.RaftRPC.logEntryResponse)
  if (payload_case() == kLogEntryResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.logentryresponse_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.logentryresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RaftCommon::LogEntryResponse& RaftRPC::_internal_logentryresponse() const {
  return payload_case() == kLogEntryResponse ? *_impl_.payload_.logentryresponse_ : reinterpret_cast<::RaftCommon::LogEntryResponse&>(::RaftCommon::_LogEntryResponse_default_instance_);
}
inline const ::RaftCommon::LogEntryResponse& RaftRPC::logentryresponse() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RaftCommon.RaftRPC.logEntryResponse)
  return _internal_logentryresponse();
}
inline ::RaftCommon::LogEntryResponse* RaftRPC::unsafe_arena_release_logentryresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RaftCommon.RaftRPC.logEntryResponse)
  if (payload_case() == kLogEntryResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.logentryresponse_;
    _impl_.payload_.logentryresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftRPC::unsafe_arena_set_allocated_logentryresponse(::RaftCommon::LogEntryResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_logentryresponse();
    _impl_.payload_.logentryresponse_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaftCommon.RaftRPC.logEntryResponse)
}
inline ::RaftCommon::LogEntryResponse* RaftRPC::_internal_mutable_logentryresponse() {
  if (payload_case() != kLogEntryResponse) {
    clear_payload();
    set_has_logentryresponse();
    _impl_.payload_.logentryresponse_ =
        ::google::protobuf::Message::DefaultConstruct<::RaftCommon::LogEntryResponse>(GetArena());
  }
  return _impl_.payload_.logentryresponse_;
}
inline ::RaftCommon::LogEntryResponse* RaftRPC::mutable_logentryresponse() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::RaftCommon::LogEntryResponse* _msg = _internal_mutable_logentryresponse();
  // @@protoc_insertion_point(field_mutable:RaftCommon.RaftRPC.logEntryResponse)
  return _msg;
}

// .RaftCommon.AppendEntriesRequest appendEntriesRequest = 3;
inline bool RaftRPC::has_appendentriesrequest() const {
  return payload_case() == kAppendEntriesRequest;
}
inline bool RaftRPC::_internal_has_appendentriesrequest() const {
  return payload_case() == kAppendEntriesRequest;
}
inline void RaftRPC::set_has_appendentriesrequest() {
  _impl_._oneof_case_[0] = kAppendEntriesRequest;
}
inline void RaftRPC::clear_appendentriesrequest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kAppendEntriesRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.appendentriesrequest_;
    }
    clear_has_payload();
  }
}
inline ::RaftCommon::AppendEntriesRequest* RaftRPC::release_appendentriesrequest() {
  // @@protoc_insertion_point(field_release:RaftCommon.RaftRPC.appendEntriesRequest)
  if (payload_case() == kAppendEntriesRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.appendentriesrequest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.appendentriesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RaftCommon::AppendEntriesRequest& RaftRPC::_internal_appendentriesrequest() const {
  return payload_case() == kAppendEntriesRequest ? *_impl_.payload_.appendentriesrequest_ : reinterpret_cast<::RaftCommon::AppendEntriesRequest&>(::RaftCommon::_AppendEntriesRequest_default_instance_);
}
inline const ::RaftCommon::AppendEntriesRequest& RaftRPC::appendentriesrequest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RaftCommon.RaftRPC.appendEntriesRequest)
  return _internal_appendentriesrequest();
}
inline ::RaftCommon::AppendEntriesRequest* RaftRPC::unsafe_arena_release_appendentriesrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RaftCommon.RaftRPC.appendEntriesRequest)
  if (payload_case() == kAppendEntriesRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.appendentriesrequest_;
    _impl_.payload_.appendentriesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftRPC::unsafe_arena_set_allocated_appendentriesrequest(::RaftCommon::AppendEntriesRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_appendentriesrequest();
    _impl_.payload_.appendentriesrequest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaftCommon.RaftRPC.appendEntriesRequest)
}
inline ::RaftCommon::AppendEntriesRequest* RaftRPC::_internal_mutable_appendentriesrequest() {
  if (payload_case() != kAppendEntriesRequest) {
    clear_payload();
    set_has_appendentriesrequest();
    _impl_.payload_.appendentriesrequest_ =
        ::google::protobuf::Message::DefaultConstruct<::RaftCommon::AppendEntriesRequest>(GetArena());
  }
  return _impl_.payload_.appendentriesrequest_;
}
inline ::RaftCommon::AppendEntriesRequest* RaftRPC::mutable_appendentriesrequest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::RaftCommon::AppendEntriesRequest* _msg = _internal_mutable_appendentriesrequest();
  // @@protoc_insertion_point(field_mutable:RaftCommon.RaftRPC.appendEntriesRequest)
  return _msg;
}

// .RaftCommon.AppendEntriesResponse appendEntriesResponse = 4;
inline bool RaftRPC::has_appendentriesresponse() const {
  return payload_case() == kAppendEntriesResponse;
}
inline bool RaftRPC::_internal_has_appendentriesresponse() const {
  return payload_case() == kAppendEntriesResponse;
}
inline void RaftRPC::set_has_appendentriesresponse() {
  _impl_._oneof_case_[0] = kAppendEntriesResponse;
}
inline void RaftRPC::clear_appendentriesresponse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kAppendEntriesResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.appendentriesresponse_;
    }
    clear_has_payload();
  }
}
inline ::RaftCommon::AppendEntriesResponse* RaftRPC::release_appendentriesresponse() {
  // @@protoc_insertion_point(field_release:RaftCommon.RaftRPC.appendEntriesResponse)
  if (payload_case() == kAppendEntriesResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.appendentriesresponse_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.appendentriesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RaftCommon::AppendEntriesResponse& RaftRPC::_internal_appendentriesresponse() const {
  return payload_case() == kAppendEntriesResponse ? *_impl_.payload_.appendentriesresponse_ : reinterpret_cast<::RaftCommon::AppendEntriesResponse&>(::RaftCommon::_AppendEntriesResponse_default_instance_);
}
inline const ::RaftCommon::AppendEntriesResponse& RaftRPC::appendentriesresponse() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RaftCommon.RaftRPC.appendEntriesResponse)
  return _internal_appendentriesresponse();
}
inline ::RaftCommon::AppendEntriesResponse* RaftRPC::unsafe_arena_release_appendentriesresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RaftCommon.RaftRPC.appendEntriesResponse)
  if (payload_case() == kAppendEntriesResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.appendentriesresponse_;
    _impl_.payload_.appendentriesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftRPC::unsafe_arena_set_allocated_appendentriesresponse(::RaftCommon::AppendEntriesResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_appendentriesresponse();
    _impl_.payload_.appendentriesresponse_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaftCommon.RaftRPC.appendEntriesResponse)
}
inline ::RaftCommon::AppendEntriesResponse* RaftRPC::_internal_mutable_appendentriesresponse() {
  if (payload_case() != kAppendEntriesResponse) {
    clear_payload();
    set_has_appendentriesresponse();
    _impl_.payload_.appendentriesresponse_ =
        ::google::protobuf::Message::DefaultConstruct<::RaftCommon::AppendEntriesResponse>(GetArena());
  }
  return _impl_.payload_.appendentriesresponse_;
}
inline ::RaftCommon::AppendEntriesResponse* RaftRPC::mutable_appendentriesresponse() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::RaftCommon::AppendEntriesResponse* _msg = _internal_mutable_appendentriesresponse();
  // @@protoc_insertion_point(field_mutable:RaftCommon.RaftRPC.appendEntriesResponse)
  return _msg;
}

// .RaftCommon.RequestVoteRequest requestVoteRequest = 5;
inline bool RaftRPC::has_requestvoterequest() const {
  return payload_case() == kRequestVoteRequest;
}
inline bool RaftRPC::_internal_has_requestvoterequest() const {
  return payload_case() == kRequestVoteRequest;
}
inline void RaftRPC::set_has_requestvoterequest() {
  _impl_._oneof_case_[0] = kRequestVoteRequest;
}
inline void RaftRPC::clear_requestvoterequest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kRequestVoteRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.requestvoterequest_;
    }
    clear_has_payload();
  }
}
inline ::RaftCommon::RequestVoteRequest* RaftRPC::release_requestvoterequest() {
  // @@protoc_insertion_point(field_release:RaftCommon.RaftRPC.requestVoteRequest)
  if (payload_case() == kRequestVoteRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.requestvoterequest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.requestvoterequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RaftCommon::RequestVoteRequest& RaftRPC::_internal_requestvoterequest() const {
  return payload_case() == kRequestVoteRequest ? *_impl_.payload_.requestvoterequest_ : reinterpret_cast<::RaftCommon::RequestVoteRequest&>(::RaftCommon::_RequestVoteRequest_default_instance_);
}
inline const ::RaftCommon::RequestVoteRequest& RaftRPC::requestvoterequest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RaftCommon.RaftRPC.requestVoteRequest)
  return _internal_requestvoterequest();
}
inline ::RaftCommon::RequestVoteRequest* RaftRPC::unsafe_arena_release_requestvoterequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RaftCommon.RaftRPC.requestVoteRequest)
  if (payload_case() == kRequestVoteRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.requestvoterequest_;
    _impl_.payload_.requestvoterequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftRPC::unsafe_arena_set_allocated_requestvoterequest(::RaftCommon::RequestVoteRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_requestvoterequest();
    _impl_.payload_.requestvoterequest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaftCommon.RaftRPC.requestVoteRequest)
}
inline ::RaftCommon::RequestVoteRequest* RaftRPC::_internal_mutable_requestvoterequest() {
  if (payload_case() != kRequestVoteRequest) {
    clear_payload();
    set_has_requestvoterequest();
    _impl_.payload_.requestvoterequest_ =
        ::google::protobuf::Message::DefaultConstruct<::RaftCommon::RequestVoteRequest>(GetArena());
  }
  return _impl_.payload_.requestvoterequest_;
}
inline ::RaftCommon::RequestVoteRequest* RaftRPC::mutable_requestvoterequest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::RaftCommon::RequestVoteRequest* _msg = _internal_mutable_requestvoterequest();
  // @@protoc_insertion_point(field_mutable:RaftCommon.RaftRPC.requestVoteRequest)
  return _msg;
}

// .RaftCommon.RequestVoteResponse requestVoteResponse = 6;
inline bool RaftRPC::has_requestvoteresponse() const {
  return payload_case() == kRequestVoteResponse;
}
inline bool RaftRPC::_internal_has_requestvoteresponse() const {
  return payload_case() == kRequestVoteResponse;
}
inline void RaftRPC::set_has_requestvoteresponse() {
  _impl_._oneof_case_[0] = kRequestVoteResponse;
}
inline void RaftRPC::clear_requestvoteresponse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kRequestVoteResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.requestvoteresponse_;
    }
    clear_has_payload();
  }
}
inline ::RaftCommon::RequestVoteResponse* RaftRPC::release_requestvoteresponse() {
  // @@protoc_insertion_point(field_release:RaftCommon.RaftRPC.requestVoteResponse)
  if (payload_case() == kRequestVoteResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.requestvoteresponse_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.requestvoteresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RaftCommon::RequestVoteResponse& RaftRPC::_internal_requestvoteresponse() const {
  return payload_case() == kRequestVoteResponse ? *_impl_.payload_.requestvoteresponse_ : reinterpret_cast<::RaftCommon::RequestVoteResponse&>(::RaftCommon::_RequestVoteResponse_default_instance_);
}
inline const ::RaftCommon::RequestVoteResponse& RaftRPC::requestvoteresponse() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RaftCommon.RaftRPC.requestVoteResponse)
  return _internal_requestvoteresponse();
}
inline ::RaftCommon::RequestVoteResponse* RaftRPC::unsafe_arena_release_requestvoteresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RaftCommon.RaftRPC.requestVoteResponse)
  if (payload_case() == kRequestVoteResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.requestvoteresponse_;
    _impl_.payload_.requestvoteresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaftRPC::unsafe_arena_set_allocated_requestvoteresponse(::RaftCommon::RequestVoteResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_requestvoteresponse();
    _impl_.payload_.requestvoteresponse_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaftCommon.RaftRPC.requestVoteResponse)
}
inline ::RaftCommon::RequestVoteResponse* RaftRPC::_internal_mutable_requestvoteresponse() {
  if (payload_case() != kRequestVoteResponse) {
    clear_payload();
    set_has_requestvoteresponse();
    _impl_.payload_.requestvoteresponse_ =
        ::google::protobuf::Message::DefaultConstruct<::RaftCommon::RequestVoteResponse>(GetArena());
  }
  return _impl_.payload_.requestvoteresponse_;
}
inline ::RaftCommon::RequestVoteResponse* RaftRPC::mutable_requestvoteresponse() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::RaftCommon::RequestVoteResponse* _msg = _internal_mutable_requestvoteresponse();
  // @@protoc_insertion_point(field_mutable:RaftCommon.RaftRPC.requestVoteResponse)
  return _msg;
}

inline bool RaftRPC::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void RaftRPC::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline RaftRPC::PayloadCase RaftRPC::payload_case() const {
  return RaftRPC::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace RaftCommon


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_raftrpc_2eproto_2epb_2eh
