syntax = "proto3";

package RaftCommon;

/* Log Entry RPC */
message LogEntryRequest {
    /**
     * Command to be executed by raft cluster state machine.
     */
    bytes cmd = 1;
}

/* Log Entry Response*/
message LogEntryResponse {
    /* True if RaftServer is the leader and was able to execute the command */
    bool success = 1;
    
    /* Return from executing shell command */
    bytes ret = 2;
}

/* Log Entry */
message LogEntry {
    /**
     * Command to be executed by raft cluster state machine.
     */
    bytes cmd = 1;

    /**
     * Term when entry was received by leader.
     */
    uint64 term = 2;
}

/* AppendEntriesRequest RPC */
message AppendEntriesRequest {
    /* ID of leader(requestor). */
    uint64 term = 1;

    /* ID of leader for client redirection. */
    uint64 leaderId = 2;

    /* Index of log entry immediately preceding first entry in entries/ */
    uint64 prevLogIndex = 3;

    /* Term of prevLogIndex entry. */
    uint64 prevLogTerm = 4;

    /* Log entries to store, empty for heartbeat. */
    repeated LogEntry entries = 5;

    /* Leader's commitIndex. */
    uint64 leaderCommit = 6;
}

/* AppendEntriesResponse RPC */
message AppendEntriesResponse {
        /* currentTerm, for leader to update itself if larger than its own. */
        uint64 term = 1;

        /* true if follower contained entry matching prevLogIndex and 
           prevLogTerm. */
        bool success = 2;
}


/* RequestVoteRequest RPC */
message RequestVoteRequest {
        /* Candidate's (requestor's) term. */
        uint64 term = 1;

        /* Candidate's id. */
        uint64 candidateId = 2;

        /* Index of candidate's last log entry. */
        uint64 lastLogIndex = 3;

        /* Term of candidate's last log entry. */
        uint64 lastLogTerm = 4;
}

/* RequestVoteResponse RPC */
message RequestVoteResponse {
        /* Current term of responder, for candidate to update itself. */
        uint64 term = 1;

        /* true means candidate received vote. */
        bool voteGranted = 2;
}

/* One of Union of all message types */
message RaftRPC {
    oneof payload {
        LogEntryRequest logEntryRequest = 1;
        LogEntryResponse logEntryResponse = 2;
        AppendEntriesRequest appendEntriesRequest = 3;
        AppendEntriesResponse appendEntriesResponse = 4;
        RequestVoteRequest requestVoteRequest = 5;
        RequestVoteResponse requestVoteResponse = 6;
    }
}
