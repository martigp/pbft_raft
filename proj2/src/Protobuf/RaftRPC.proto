syntax = "proto3";

message RPC {
    /* AppendEntries RPC */
    message AppendEntries {
        message Request {
            /* ID of leader(requestor). */
            uint64 term = 1;

            /* ID of leader for client redirection. */
            uint64 leaderId = 2;

            /* Index of log entry immediately preceding first entry in entries/ */
            uint64 prevLogIndex = 3;

            /* Term of prevLogIndex entry. */
            uint64 prevLogTerm = 4;

            /* Log Entry */
            message Entry {
                /**
                * Command to be executed by raft cluster state machine.
                */
                bytes cmd = 1;

                /**
                * Term when log entry was received by leader.
                */
                uint64 term = 2;
            }

            /* Log entries to store, empty for heartbeat. */
            repeated Entry entries = 5;

            /* Leader's commitIndex. */
            uint64 leaderCommit = 6;

            /* Request ID for implementing RPC pairing behavior. */
            uint64 requestID = 7;
        }

        message Response {
            /* currentTerm, for leader to update itself if larger than its own. */
            uint64 term = 1;

            /* true if follower contained entry matching prevLogIndex and 
            prevLogTerm. */
            bool success = 2;

            /* Request ID for implementing RPC pairing behavior. */
            uint64 requestID = 3;
        }
    }

    /* RequestVote RPC */
    message RequestVote {
        message Request {
            /* Candidate's (requestor's) term. */
            uint64 term = 1;

            /* Candidate's id. */
            uint64 candidateId = 2;

            /* Index of candidate's last log entry. */
            uint64 lastLogIndex = 3;

            /* Term of candidate's last log entry. */
            uint64 lastLogTerm = 4;
        }

        message Response {
            /* Current term of responder, for candidate to update itself. */
            uint64 term = 1;

            /* true means candidate received vote. */
            bool voteGranted = 2;
        }
    }

    message StateMachineCmd {
        message Request {
            /* Unique request ID for a specific client generated by the 
               Raft Client */
            uint64 requestId = 1;

            /* State Machine Command to execute */
            bytes cmd = 2;
        }
        message Response {
            /* Unique request ID for a specific client generated by the 
               Raft Client that this message is in response to. */
            uint64 requestId = 1;

            /* Whether the state machine command was successfully applied */
            bool success = 2;

            /* Hint as to which Server is the Leader so client knows to send
               to this server upon failure of application. Only used when 
               success = FALSE */
            uint64 leaderId = 3;

            /* The result of the application of state machine command requested.
               Only set on success = TRUE */
            bytes msg = 4;
        }
    }

    oneof msg {
        AppendEntries.Request appendEntriesReq = 1;
        AppendEntries.Response appendEntriesResp = 2;
        RequestVote.Request requestVoteReq = 3;
        RequestVote.Response requestVoteResp = 4;
        StateMachineCmd.Request stateMachineCmdReq = 5;
        StateMachineCmd.Response stateMachineCmdResp = 6;
    }
}